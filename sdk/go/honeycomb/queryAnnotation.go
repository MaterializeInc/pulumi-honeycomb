// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package honeycomb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-honeycomb/sdk/go/honeycomb"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		cfg := config.New(ctx, "")
// 		dataset := cfg.Require("dataset")
// 		testQueryGetQuerySpecification, err := honeycomb.GetQuerySpecification(ctx, &GetQuerySpecificationArgs{
// 			Calculations: []GetQuerySpecificationCalculation{
// 				GetQuerySpecificationCalculation{
// 					Op:     "AVG",
// 					Column: pulumi.StringRef("duration_ms"),
// 				},
// 			},
// 			Filters: []GetQuerySpecificationFilter{
// 				GetQuerySpecificationFilter{
// 					Column: "duration_ms",
// 					Op:     ">",
// 					Value:  pulumi.StringRef("10"),
// 				},
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		testQueryQuery, err := honeycomb.NewQuery(ctx, "testQueryQuery", &honeycomb.QueryArgs{
// 			Dataset:   pulumi.String(dataset),
// 			QueryJson: pulumi.String(testQueryGetQuerySpecification.Json),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = honeycomb.NewQueryAnnotation(ctx, "testAnnotation", &honeycomb.QueryAnnotationArgs{
// 			Dataset:     pulumi.String(dataset),
// 			QueryId:     testQueryQuery.ID(),
// 			Description: pulumi.String("Describes my cool query (optional)"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Query annotations cannot be imported.
type QueryAnnotation struct {
	pulumi.CustomResourceState

	// The dataset this query is added to.
	Dataset pulumi.StringOutput `pulumi:"dataset"`
	// The description for the query annotation.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the query annotation that will display in the Honeycomb UI.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the query that the annotation will be created on. Note that a query can have more than one annotation.
	QueryId pulumi.StringOutput `pulumi:"queryId"`
}

// NewQueryAnnotation registers a new resource with the given unique name, arguments, and options.
func NewQueryAnnotation(ctx *pulumi.Context,
	name string, args *QueryAnnotationArgs, opts ...pulumi.ResourceOption) (*QueryAnnotation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dataset == nil {
		return nil, errors.New("invalid value for required argument 'Dataset'")
	}
	if args.QueryId == nil {
		return nil, errors.New("invalid value for required argument 'QueryId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource QueryAnnotation
	err := ctx.RegisterResource("honeycomb:index/queryAnnotation:QueryAnnotation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueryAnnotation gets an existing QueryAnnotation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueryAnnotation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueryAnnotationState, opts ...pulumi.ResourceOption) (*QueryAnnotation, error) {
	var resource QueryAnnotation
	err := ctx.ReadResource("honeycomb:index/queryAnnotation:QueryAnnotation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QueryAnnotation resources.
type queryAnnotationState struct {
	// The dataset this query is added to.
	Dataset *string `pulumi:"dataset"`
	// The description for the query annotation.
	Description *string `pulumi:"description"`
	// The name of the query annotation that will display in the Honeycomb UI.
	Name *string `pulumi:"name"`
	// The ID of the query that the annotation will be created on. Note that a query can have more than one annotation.
	QueryId *string `pulumi:"queryId"`
}

type QueryAnnotationState struct {
	// The dataset this query is added to.
	Dataset pulumi.StringPtrInput
	// The description for the query annotation.
	Description pulumi.StringPtrInput
	// The name of the query annotation that will display in the Honeycomb UI.
	Name pulumi.StringPtrInput
	// The ID of the query that the annotation will be created on. Note that a query can have more than one annotation.
	QueryId pulumi.StringPtrInput
}

func (QueryAnnotationState) ElementType() reflect.Type {
	return reflect.TypeOf((*queryAnnotationState)(nil)).Elem()
}

type queryAnnotationArgs struct {
	// The dataset this query is added to.
	Dataset string `pulumi:"dataset"`
	// The description for the query annotation.
	Description *string `pulumi:"description"`
	// The name of the query annotation that will display in the Honeycomb UI.
	Name *string `pulumi:"name"`
	// The ID of the query that the annotation will be created on. Note that a query can have more than one annotation.
	QueryId string `pulumi:"queryId"`
}

// The set of arguments for constructing a QueryAnnotation resource.
type QueryAnnotationArgs struct {
	// The dataset this query is added to.
	Dataset pulumi.StringInput
	// The description for the query annotation.
	Description pulumi.StringPtrInput
	// The name of the query annotation that will display in the Honeycomb UI.
	Name pulumi.StringPtrInput
	// The ID of the query that the annotation will be created on. Note that a query can have more than one annotation.
	QueryId pulumi.StringInput
}

func (QueryAnnotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queryAnnotationArgs)(nil)).Elem()
}

type QueryAnnotationInput interface {
	pulumi.Input

	ToQueryAnnotationOutput() QueryAnnotationOutput
	ToQueryAnnotationOutputWithContext(ctx context.Context) QueryAnnotationOutput
}

func (*QueryAnnotation) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryAnnotation)(nil)).Elem()
}

func (i *QueryAnnotation) ToQueryAnnotationOutput() QueryAnnotationOutput {
	return i.ToQueryAnnotationOutputWithContext(context.Background())
}

func (i *QueryAnnotation) ToQueryAnnotationOutputWithContext(ctx context.Context) QueryAnnotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryAnnotationOutput)
}

// QueryAnnotationArrayInput is an input type that accepts QueryAnnotationArray and QueryAnnotationArrayOutput values.
// You can construct a concrete instance of `QueryAnnotationArrayInput` via:
//
//          QueryAnnotationArray{ QueryAnnotationArgs{...} }
type QueryAnnotationArrayInput interface {
	pulumi.Input

	ToQueryAnnotationArrayOutput() QueryAnnotationArrayOutput
	ToQueryAnnotationArrayOutputWithContext(context.Context) QueryAnnotationArrayOutput
}

type QueryAnnotationArray []QueryAnnotationInput

func (QueryAnnotationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QueryAnnotation)(nil)).Elem()
}

func (i QueryAnnotationArray) ToQueryAnnotationArrayOutput() QueryAnnotationArrayOutput {
	return i.ToQueryAnnotationArrayOutputWithContext(context.Background())
}

func (i QueryAnnotationArray) ToQueryAnnotationArrayOutputWithContext(ctx context.Context) QueryAnnotationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryAnnotationArrayOutput)
}

// QueryAnnotationMapInput is an input type that accepts QueryAnnotationMap and QueryAnnotationMapOutput values.
// You can construct a concrete instance of `QueryAnnotationMapInput` via:
//
//          QueryAnnotationMap{ "key": QueryAnnotationArgs{...} }
type QueryAnnotationMapInput interface {
	pulumi.Input

	ToQueryAnnotationMapOutput() QueryAnnotationMapOutput
	ToQueryAnnotationMapOutputWithContext(context.Context) QueryAnnotationMapOutput
}

type QueryAnnotationMap map[string]QueryAnnotationInput

func (QueryAnnotationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QueryAnnotation)(nil)).Elem()
}

func (i QueryAnnotationMap) ToQueryAnnotationMapOutput() QueryAnnotationMapOutput {
	return i.ToQueryAnnotationMapOutputWithContext(context.Background())
}

func (i QueryAnnotationMap) ToQueryAnnotationMapOutputWithContext(ctx context.Context) QueryAnnotationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryAnnotationMapOutput)
}

type QueryAnnotationOutput struct{ *pulumi.OutputState }

func (QueryAnnotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryAnnotation)(nil)).Elem()
}

func (o QueryAnnotationOutput) ToQueryAnnotationOutput() QueryAnnotationOutput {
	return o
}

func (o QueryAnnotationOutput) ToQueryAnnotationOutputWithContext(ctx context.Context) QueryAnnotationOutput {
	return o
}

type QueryAnnotationArrayOutput struct{ *pulumi.OutputState }

func (QueryAnnotationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QueryAnnotation)(nil)).Elem()
}

func (o QueryAnnotationArrayOutput) ToQueryAnnotationArrayOutput() QueryAnnotationArrayOutput {
	return o
}

func (o QueryAnnotationArrayOutput) ToQueryAnnotationArrayOutputWithContext(ctx context.Context) QueryAnnotationArrayOutput {
	return o
}

func (o QueryAnnotationArrayOutput) Index(i pulumi.IntInput) QueryAnnotationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *QueryAnnotation {
		return vs[0].([]*QueryAnnotation)[vs[1].(int)]
	}).(QueryAnnotationOutput)
}

type QueryAnnotationMapOutput struct{ *pulumi.OutputState }

func (QueryAnnotationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QueryAnnotation)(nil)).Elem()
}

func (o QueryAnnotationMapOutput) ToQueryAnnotationMapOutput() QueryAnnotationMapOutput {
	return o
}

func (o QueryAnnotationMapOutput) ToQueryAnnotationMapOutputWithContext(ctx context.Context) QueryAnnotationMapOutput {
	return o
}

func (o QueryAnnotationMapOutput) MapIndex(k pulumi.StringInput) QueryAnnotationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *QueryAnnotation {
		return vs[0].(map[string]*QueryAnnotation)[vs[1].(string)]
	}).(QueryAnnotationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QueryAnnotationInput)(nil)).Elem(), &QueryAnnotation{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryAnnotationArrayInput)(nil)).Elem(), QueryAnnotationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryAnnotationMapInput)(nil)).Elem(), QueryAnnotationMap{})
	pulumi.RegisterOutputType(QueryAnnotationOutput{})
	pulumi.RegisterOutputType(QueryAnnotationArrayOutput{})
	pulumi.RegisterOutputType(QueryAnnotationMapOutput{})
}
