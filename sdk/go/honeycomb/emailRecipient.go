// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package honeycomb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Resource: EmailRecipient
//
// `EmailRecipient` allows you to define and manage an Email recipient that can be used by Triggers or BurnAlerts notifications.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-honeycomb/sdk/go/honeycomb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := honeycomb.NewEmailRecipient(ctx, "alerts", &honeycomb.EmailRecipientArgs{
//				Address: pulumi.String("alerts@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Email Recipients can be imported by their ID, e.g.
//
// ```sh
//
//	$ pulumi import honeycomb:index/emailRecipient:EmailRecipient my_recipient nx2zsegA0dZ
//
// ```
type EmailRecipient struct {
	pulumi.CustomResourceState

	// The email address to send the notification to.
	Address pulumi.StringOutput `pulumi:"address"`
}

// NewEmailRecipient registers a new resource with the given unique name, arguments, and options.
func NewEmailRecipient(ctx *pulumi.Context,
	name string, args *EmailRecipientArgs, opts ...pulumi.ResourceOption) (*EmailRecipient, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource EmailRecipient
	err := ctx.RegisterResource("honeycomb:index/emailRecipient:EmailRecipient", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmailRecipient gets an existing EmailRecipient resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmailRecipient(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmailRecipientState, opts ...pulumi.ResourceOption) (*EmailRecipient, error) {
	var resource EmailRecipient
	err := ctx.ReadResource("honeycomb:index/emailRecipient:EmailRecipient", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EmailRecipient resources.
type emailRecipientState struct {
	// The email address to send the notification to.
	Address *string `pulumi:"address"`
}

type EmailRecipientState struct {
	// The email address to send the notification to.
	Address pulumi.StringPtrInput
}

func (EmailRecipientState) ElementType() reflect.Type {
	return reflect.TypeOf((*emailRecipientState)(nil)).Elem()
}

type emailRecipientArgs struct {
	// The email address to send the notification to.
	Address string `pulumi:"address"`
}

// The set of arguments for constructing a EmailRecipient resource.
type EmailRecipientArgs struct {
	// The email address to send the notification to.
	Address pulumi.StringInput
}

func (EmailRecipientArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emailRecipientArgs)(nil)).Elem()
}

type EmailRecipientInput interface {
	pulumi.Input

	ToEmailRecipientOutput() EmailRecipientOutput
	ToEmailRecipientOutputWithContext(ctx context.Context) EmailRecipientOutput
}

func (*EmailRecipient) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailRecipient)(nil)).Elem()
}

func (i *EmailRecipient) ToEmailRecipientOutput() EmailRecipientOutput {
	return i.ToEmailRecipientOutputWithContext(context.Background())
}

func (i *EmailRecipient) ToEmailRecipientOutputWithContext(ctx context.Context) EmailRecipientOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailRecipientOutput)
}

// EmailRecipientArrayInput is an input type that accepts EmailRecipientArray and EmailRecipientArrayOutput values.
// You can construct a concrete instance of `EmailRecipientArrayInput` via:
//
//	EmailRecipientArray{ EmailRecipientArgs{...} }
type EmailRecipientArrayInput interface {
	pulumi.Input

	ToEmailRecipientArrayOutput() EmailRecipientArrayOutput
	ToEmailRecipientArrayOutputWithContext(context.Context) EmailRecipientArrayOutput
}

type EmailRecipientArray []EmailRecipientInput

func (EmailRecipientArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailRecipient)(nil)).Elem()
}

func (i EmailRecipientArray) ToEmailRecipientArrayOutput() EmailRecipientArrayOutput {
	return i.ToEmailRecipientArrayOutputWithContext(context.Background())
}

func (i EmailRecipientArray) ToEmailRecipientArrayOutputWithContext(ctx context.Context) EmailRecipientArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailRecipientArrayOutput)
}

// EmailRecipientMapInput is an input type that accepts EmailRecipientMap and EmailRecipientMapOutput values.
// You can construct a concrete instance of `EmailRecipientMapInput` via:
//
//	EmailRecipientMap{ "key": EmailRecipientArgs{...} }
type EmailRecipientMapInput interface {
	pulumi.Input

	ToEmailRecipientMapOutput() EmailRecipientMapOutput
	ToEmailRecipientMapOutputWithContext(context.Context) EmailRecipientMapOutput
}

type EmailRecipientMap map[string]EmailRecipientInput

func (EmailRecipientMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailRecipient)(nil)).Elem()
}

func (i EmailRecipientMap) ToEmailRecipientMapOutput() EmailRecipientMapOutput {
	return i.ToEmailRecipientMapOutputWithContext(context.Background())
}

func (i EmailRecipientMap) ToEmailRecipientMapOutputWithContext(ctx context.Context) EmailRecipientMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailRecipientMapOutput)
}

type EmailRecipientOutput struct{ *pulumi.OutputState }

func (EmailRecipientOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailRecipient)(nil)).Elem()
}

func (o EmailRecipientOutput) ToEmailRecipientOutput() EmailRecipientOutput {
	return o
}

func (o EmailRecipientOutput) ToEmailRecipientOutputWithContext(ctx context.Context) EmailRecipientOutput {
	return o
}

// The email address to send the notification to.
func (o EmailRecipientOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailRecipient) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

type EmailRecipientArrayOutput struct{ *pulumi.OutputState }

func (EmailRecipientArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailRecipient)(nil)).Elem()
}

func (o EmailRecipientArrayOutput) ToEmailRecipientArrayOutput() EmailRecipientArrayOutput {
	return o
}

func (o EmailRecipientArrayOutput) ToEmailRecipientArrayOutputWithContext(ctx context.Context) EmailRecipientArrayOutput {
	return o
}

func (o EmailRecipientArrayOutput) Index(i pulumi.IntInput) EmailRecipientOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EmailRecipient {
		return vs[0].([]*EmailRecipient)[vs[1].(int)]
	}).(EmailRecipientOutput)
}

type EmailRecipientMapOutput struct{ *pulumi.OutputState }

func (EmailRecipientMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailRecipient)(nil)).Elem()
}

func (o EmailRecipientMapOutput) ToEmailRecipientMapOutput() EmailRecipientMapOutput {
	return o
}

func (o EmailRecipientMapOutput) ToEmailRecipientMapOutputWithContext(ctx context.Context) EmailRecipientMapOutput {
	return o
}

func (o EmailRecipientMapOutput) MapIndex(k pulumi.StringInput) EmailRecipientOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EmailRecipient {
		return vs[0].(map[string]*EmailRecipient)[vs[1].(string)]
	}).(EmailRecipientOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EmailRecipientInput)(nil)).Elem(), &EmailRecipient{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailRecipientArrayInput)(nil)).Elem(), EmailRecipientArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailRecipientMapInput)(nil)).Elem(), EmailRecipientMap{})
	pulumi.RegisterOutputType(EmailRecipientOutput{})
	pulumi.RegisterOutputType(EmailRecipientArrayOutput{})
	pulumi.RegisterOutputType(EmailRecipientMapOutput{})
}
