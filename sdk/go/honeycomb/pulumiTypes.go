// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package honeycomb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BoardQuery struct {
	// A description of the query that will be displayed on the board. Supports markdown.
	Caption *string `pulumi:"caption"`
	// The dataset this query is associated with.
	Dataset string `pulumi:"dataset"`
	// The ID of the Query Annotation to associate with this query.
	QueryAnnotationId *string `pulumi:"queryAnnotationId"`
	// The ID of the Query to run.
	QueryId string `pulumi:"queryId"`
	// How the query should be displayed within the board, either `graph` (the default), `table` or `combo`.
	QueryStyle *string `pulumi:"queryStyle"`
}

// BoardQueryInput is an input type that accepts BoardQueryArgs and BoardQueryOutput values.
// You can construct a concrete instance of `BoardQueryInput` via:
//
//          BoardQueryArgs{...}
type BoardQueryInput interface {
	pulumi.Input

	ToBoardQueryOutput() BoardQueryOutput
	ToBoardQueryOutputWithContext(context.Context) BoardQueryOutput
}

type BoardQueryArgs struct {
	// A description of the query that will be displayed on the board. Supports markdown.
	Caption pulumi.StringPtrInput `pulumi:"caption"`
	// The dataset this query is associated with.
	Dataset pulumi.StringInput `pulumi:"dataset"`
	// The ID of the Query Annotation to associate with this query.
	QueryAnnotationId pulumi.StringPtrInput `pulumi:"queryAnnotationId"`
	// The ID of the Query to run.
	QueryId pulumi.StringInput `pulumi:"queryId"`
	// How the query should be displayed within the board, either `graph` (the default), `table` or `combo`.
	QueryStyle pulumi.StringPtrInput `pulumi:"queryStyle"`
}

func (BoardQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BoardQuery)(nil)).Elem()
}

func (i BoardQueryArgs) ToBoardQueryOutput() BoardQueryOutput {
	return i.ToBoardQueryOutputWithContext(context.Background())
}

func (i BoardQueryArgs) ToBoardQueryOutputWithContext(ctx context.Context) BoardQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoardQueryOutput)
}

// BoardQueryArrayInput is an input type that accepts BoardQueryArray and BoardQueryArrayOutput values.
// You can construct a concrete instance of `BoardQueryArrayInput` via:
//
//          BoardQueryArray{ BoardQueryArgs{...} }
type BoardQueryArrayInput interface {
	pulumi.Input

	ToBoardQueryArrayOutput() BoardQueryArrayOutput
	ToBoardQueryArrayOutputWithContext(context.Context) BoardQueryArrayOutput
}

type BoardQueryArray []BoardQueryInput

func (BoardQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BoardQuery)(nil)).Elem()
}

func (i BoardQueryArray) ToBoardQueryArrayOutput() BoardQueryArrayOutput {
	return i.ToBoardQueryArrayOutputWithContext(context.Background())
}

func (i BoardQueryArray) ToBoardQueryArrayOutputWithContext(ctx context.Context) BoardQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoardQueryArrayOutput)
}

type BoardQueryOutput struct{ *pulumi.OutputState }

func (BoardQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BoardQuery)(nil)).Elem()
}

func (o BoardQueryOutput) ToBoardQueryOutput() BoardQueryOutput {
	return o
}

func (o BoardQueryOutput) ToBoardQueryOutputWithContext(ctx context.Context) BoardQueryOutput {
	return o
}

// A description of the query that will be displayed on the board. Supports markdown.
func (o BoardQueryOutput) Caption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BoardQuery) *string { return v.Caption }).(pulumi.StringPtrOutput)
}

// The dataset this query is associated with.
func (o BoardQueryOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v BoardQuery) string { return v.Dataset }).(pulumi.StringOutput)
}

// The ID of the Query Annotation to associate with this query.
func (o BoardQueryOutput) QueryAnnotationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BoardQuery) *string { return v.QueryAnnotationId }).(pulumi.StringPtrOutput)
}

// The ID of the Query to run.
func (o BoardQueryOutput) QueryId() pulumi.StringOutput {
	return o.ApplyT(func(v BoardQuery) string { return v.QueryId }).(pulumi.StringOutput)
}

// How the query should be displayed within the board, either `graph` (the default), `table` or `combo`.
func (o BoardQueryOutput) QueryStyle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BoardQuery) *string { return v.QueryStyle }).(pulumi.StringPtrOutput)
}

type BoardQueryArrayOutput struct{ *pulumi.OutputState }

func (BoardQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BoardQuery)(nil)).Elem()
}

func (o BoardQueryArrayOutput) ToBoardQueryArrayOutput() BoardQueryArrayOutput {
	return o
}

func (o BoardQueryArrayOutput) ToBoardQueryArrayOutputWithContext(ctx context.Context) BoardQueryArrayOutput {
	return o
}

func (o BoardQueryArrayOutput) Index(i pulumi.IntInput) BoardQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BoardQuery {
		return vs[0].([]BoardQuery)[vs[1].(int)]
	}).(BoardQueryOutput)
}

type BurnAlertRecipient struct {
	// The ID of an already existing recipient. Should not be used in combination with `type` and `target`.
	Id *string `pulumi:"id"`
	// a block of additional details to send along with the notification. The only supported option currently is `pagerdutySeverity` which can be set to one of `info`, `warning`, `error`, or `critical` and must be used in combination with a PagerDuty recipient.
	NotificationDetails *BurnAlertRecipientNotificationDetails `pulumi:"notificationDetails"`
	// Target of the recipient, this has another meaning depending on the type of recipient (see the table below). Should not be used in combination with `id`.
	Target *string `pulumi:"target"`
	// The type of the recipient, allowed types are `email`, `pagerduty`, `slack` and `webhook`. Should not be used in combination with `id`.
	Type *string `pulumi:"type"`
}

// BurnAlertRecipientInput is an input type that accepts BurnAlertRecipientArgs and BurnAlertRecipientOutput values.
// You can construct a concrete instance of `BurnAlertRecipientInput` via:
//
//          BurnAlertRecipientArgs{...}
type BurnAlertRecipientInput interface {
	pulumi.Input

	ToBurnAlertRecipientOutput() BurnAlertRecipientOutput
	ToBurnAlertRecipientOutputWithContext(context.Context) BurnAlertRecipientOutput
}

type BurnAlertRecipientArgs struct {
	// The ID of an already existing recipient. Should not be used in combination with `type` and `target`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// a block of additional details to send along with the notification. The only supported option currently is `pagerdutySeverity` which can be set to one of `info`, `warning`, `error`, or `critical` and must be used in combination with a PagerDuty recipient.
	NotificationDetails BurnAlertRecipientNotificationDetailsPtrInput `pulumi:"notificationDetails"`
	// Target of the recipient, this has another meaning depending on the type of recipient (see the table below). Should not be used in combination with `id`.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// The type of the recipient, allowed types are `email`, `pagerduty`, `slack` and `webhook`. Should not be used in combination with `id`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (BurnAlertRecipientArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BurnAlertRecipient)(nil)).Elem()
}

func (i BurnAlertRecipientArgs) ToBurnAlertRecipientOutput() BurnAlertRecipientOutput {
	return i.ToBurnAlertRecipientOutputWithContext(context.Background())
}

func (i BurnAlertRecipientArgs) ToBurnAlertRecipientOutputWithContext(ctx context.Context) BurnAlertRecipientOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BurnAlertRecipientOutput)
}

// BurnAlertRecipientArrayInput is an input type that accepts BurnAlertRecipientArray and BurnAlertRecipientArrayOutput values.
// You can construct a concrete instance of `BurnAlertRecipientArrayInput` via:
//
//          BurnAlertRecipientArray{ BurnAlertRecipientArgs{...} }
type BurnAlertRecipientArrayInput interface {
	pulumi.Input

	ToBurnAlertRecipientArrayOutput() BurnAlertRecipientArrayOutput
	ToBurnAlertRecipientArrayOutputWithContext(context.Context) BurnAlertRecipientArrayOutput
}

type BurnAlertRecipientArray []BurnAlertRecipientInput

func (BurnAlertRecipientArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BurnAlertRecipient)(nil)).Elem()
}

func (i BurnAlertRecipientArray) ToBurnAlertRecipientArrayOutput() BurnAlertRecipientArrayOutput {
	return i.ToBurnAlertRecipientArrayOutputWithContext(context.Background())
}

func (i BurnAlertRecipientArray) ToBurnAlertRecipientArrayOutputWithContext(ctx context.Context) BurnAlertRecipientArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BurnAlertRecipientArrayOutput)
}

type BurnAlertRecipientOutput struct{ *pulumi.OutputState }

func (BurnAlertRecipientOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BurnAlertRecipient)(nil)).Elem()
}

func (o BurnAlertRecipientOutput) ToBurnAlertRecipientOutput() BurnAlertRecipientOutput {
	return o
}

func (o BurnAlertRecipientOutput) ToBurnAlertRecipientOutputWithContext(ctx context.Context) BurnAlertRecipientOutput {
	return o
}

// The ID of an already existing recipient. Should not be used in combination with `type` and `target`.
func (o BurnAlertRecipientOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BurnAlertRecipient) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// a block of additional details to send along with the notification. The only supported option currently is `pagerdutySeverity` which can be set to one of `info`, `warning`, `error`, or `critical` and must be used in combination with a PagerDuty recipient.
func (o BurnAlertRecipientOutput) NotificationDetails() BurnAlertRecipientNotificationDetailsPtrOutput {
	return o.ApplyT(func(v BurnAlertRecipient) *BurnAlertRecipientNotificationDetails { return v.NotificationDetails }).(BurnAlertRecipientNotificationDetailsPtrOutput)
}

// Target of the recipient, this has another meaning depending on the type of recipient (see the table below). Should not be used in combination with `id`.
func (o BurnAlertRecipientOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BurnAlertRecipient) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// The type of the recipient, allowed types are `email`, `pagerduty`, `slack` and `webhook`. Should not be used in combination with `id`.
func (o BurnAlertRecipientOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BurnAlertRecipient) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type BurnAlertRecipientArrayOutput struct{ *pulumi.OutputState }

func (BurnAlertRecipientArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BurnAlertRecipient)(nil)).Elem()
}

func (o BurnAlertRecipientArrayOutput) ToBurnAlertRecipientArrayOutput() BurnAlertRecipientArrayOutput {
	return o
}

func (o BurnAlertRecipientArrayOutput) ToBurnAlertRecipientArrayOutputWithContext(ctx context.Context) BurnAlertRecipientArrayOutput {
	return o
}

func (o BurnAlertRecipientArrayOutput) Index(i pulumi.IntInput) BurnAlertRecipientOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BurnAlertRecipient {
		return vs[0].([]BurnAlertRecipient)[vs[1].(int)]
	}).(BurnAlertRecipientOutput)
}

type BurnAlertRecipientNotificationDetails struct {
	PagerdutySeverity string `pulumi:"pagerdutySeverity"`
}

// BurnAlertRecipientNotificationDetailsInput is an input type that accepts BurnAlertRecipientNotificationDetailsArgs and BurnAlertRecipientNotificationDetailsOutput values.
// You can construct a concrete instance of `BurnAlertRecipientNotificationDetailsInput` via:
//
//          BurnAlertRecipientNotificationDetailsArgs{...}
type BurnAlertRecipientNotificationDetailsInput interface {
	pulumi.Input

	ToBurnAlertRecipientNotificationDetailsOutput() BurnAlertRecipientNotificationDetailsOutput
	ToBurnAlertRecipientNotificationDetailsOutputWithContext(context.Context) BurnAlertRecipientNotificationDetailsOutput
}

type BurnAlertRecipientNotificationDetailsArgs struct {
	PagerdutySeverity pulumi.StringInput `pulumi:"pagerdutySeverity"`
}

func (BurnAlertRecipientNotificationDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BurnAlertRecipientNotificationDetails)(nil)).Elem()
}

func (i BurnAlertRecipientNotificationDetailsArgs) ToBurnAlertRecipientNotificationDetailsOutput() BurnAlertRecipientNotificationDetailsOutput {
	return i.ToBurnAlertRecipientNotificationDetailsOutputWithContext(context.Background())
}

func (i BurnAlertRecipientNotificationDetailsArgs) ToBurnAlertRecipientNotificationDetailsOutputWithContext(ctx context.Context) BurnAlertRecipientNotificationDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BurnAlertRecipientNotificationDetailsOutput)
}

func (i BurnAlertRecipientNotificationDetailsArgs) ToBurnAlertRecipientNotificationDetailsPtrOutput() BurnAlertRecipientNotificationDetailsPtrOutput {
	return i.ToBurnAlertRecipientNotificationDetailsPtrOutputWithContext(context.Background())
}

func (i BurnAlertRecipientNotificationDetailsArgs) ToBurnAlertRecipientNotificationDetailsPtrOutputWithContext(ctx context.Context) BurnAlertRecipientNotificationDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BurnAlertRecipientNotificationDetailsOutput).ToBurnAlertRecipientNotificationDetailsPtrOutputWithContext(ctx)
}

// BurnAlertRecipientNotificationDetailsPtrInput is an input type that accepts BurnAlertRecipientNotificationDetailsArgs, BurnAlertRecipientNotificationDetailsPtr and BurnAlertRecipientNotificationDetailsPtrOutput values.
// You can construct a concrete instance of `BurnAlertRecipientNotificationDetailsPtrInput` via:
//
//          BurnAlertRecipientNotificationDetailsArgs{...}
//
//  or:
//
//          nil
type BurnAlertRecipientNotificationDetailsPtrInput interface {
	pulumi.Input

	ToBurnAlertRecipientNotificationDetailsPtrOutput() BurnAlertRecipientNotificationDetailsPtrOutput
	ToBurnAlertRecipientNotificationDetailsPtrOutputWithContext(context.Context) BurnAlertRecipientNotificationDetailsPtrOutput
}

type burnAlertRecipientNotificationDetailsPtrType BurnAlertRecipientNotificationDetailsArgs

func BurnAlertRecipientNotificationDetailsPtr(v *BurnAlertRecipientNotificationDetailsArgs) BurnAlertRecipientNotificationDetailsPtrInput {
	return (*burnAlertRecipientNotificationDetailsPtrType)(v)
}

func (*burnAlertRecipientNotificationDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BurnAlertRecipientNotificationDetails)(nil)).Elem()
}

func (i *burnAlertRecipientNotificationDetailsPtrType) ToBurnAlertRecipientNotificationDetailsPtrOutput() BurnAlertRecipientNotificationDetailsPtrOutput {
	return i.ToBurnAlertRecipientNotificationDetailsPtrOutputWithContext(context.Background())
}

func (i *burnAlertRecipientNotificationDetailsPtrType) ToBurnAlertRecipientNotificationDetailsPtrOutputWithContext(ctx context.Context) BurnAlertRecipientNotificationDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BurnAlertRecipientNotificationDetailsPtrOutput)
}

type BurnAlertRecipientNotificationDetailsOutput struct{ *pulumi.OutputState }

func (BurnAlertRecipientNotificationDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BurnAlertRecipientNotificationDetails)(nil)).Elem()
}

func (o BurnAlertRecipientNotificationDetailsOutput) ToBurnAlertRecipientNotificationDetailsOutput() BurnAlertRecipientNotificationDetailsOutput {
	return o
}

func (o BurnAlertRecipientNotificationDetailsOutput) ToBurnAlertRecipientNotificationDetailsOutputWithContext(ctx context.Context) BurnAlertRecipientNotificationDetailsOutput {
	return o
}

func (o BurnAlertRecipientNotificationDetailsOutput) ToBurnAlertRecipientNotificationDetailsPtrOutput() BurnAlertRecipientNotificationDetailsPtrOutput {
	return o.ToBurnAlertRecipientNotificationDetailsPtrOutputWithContext(context.Background())
}

func (o BurnAlertRecipientNotificationDetailsOutput) ToBurnAlertRecipientNotificationDetailsPtrOutputWithContext(ctx context.Context) BurnAlertRecipientNotificationDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BurnAlertRecipientNotificationDetails) *BurnAlertRecipientNotificationDetails {
		return &v
	}).(BurnAlertRecipientNotificationDetailsPtrOutput)
}

func (o BurnAlertRecipientNotificationDetailsOutput) PagerdutySeverity() pulumi.StringOutput {
	return o.ApplyT(func(v BurnAlertRecipientNotificationDetails) string { return v.PagerdutySeverity }).(pulumi.StringOutput)
}

type BurnAlertRecipientNotificationDetailsPtrOutput struct{ *pulumi.OutputState }

func (BurnAlertRecipientNotificationDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BurnAlertRecipientNotificationDetails)(nil)).Elem()
}

func (o BurnAlertRecipientNotificationDetailsPtrOutput) ToBurnAlertRecipientNotificationDetailsPtrOutput() BurnAlertRecipientNotificationDetailsPtrOutput {
	return o
}

func (o BurnAlertRecipientNotificationDetailsPtrOutput) ToBurnAlertRecipientNotificationDetailsPtrOutputWithContext(ctx context.Context) BurnAlertRecipientNotificationDetailsPtrOutput {
	return o
}

func (o BurnAlertRecipientNotificationDetailsPtrOutput) Elem() BurnAlertRecipientNotificationDetailsOutput {
	return o.ApplyT(func(v *BurnAlertRecipientNotificationDetails) BurnAlertRecipientNotificationDetails {
		if v != nil {
			return *v
		}
		var ret BurnAlertRecipientNotificationDetails
		return ret
	}).(BurnAlertRecipientNotificationDetailsOutput)
}

func (o BurnAlertRecipientNotificationDetailsPtrOutput) PagerdutySeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BurnAlertRecipientNotificationDetails) *string {
		if v == nil {
			return nil
		}
		return &v.PagerdutySeverity
	}).(pulumi.StringPtrOutput)
}

type GetQuerySpecificationCalculation struct {
	// The column to apply the operator to, not needed with `COUNT` or `CONCURRENCY`.
	Column *string `pulumi:"column"`
	// The operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).
	Op string `pulumi:"op"`
}

// GetQuerySpecificationCalculationInput is an input type that accepts GetQuerySpecificationCalculationArgs and GetQuerySpecificationCalculationOutput values.
// You can construct a concrete instance of `GetQuerySpecificationCalculationInput` via:
//
//          GetQuerySpecificationCalculationArgs{...}
type GetQuerySpecificationCalculationInput interface {
	pulumi.Input

	ToGetQuerySpecificationCalculationOutput() GetQuerySpecificationCalculationOutput
	ToGetQuerySpecificationCalculationOutputWithContext(context.Context) GetQuerySpecificationCalculationOutput
}

type GetQuerySpecificationCalculationArgs struct {
	// The column to apply the operator to, not needed with `COUNT` or `CONCURRENCY`.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// The operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).
	Op pulumi.StringInput `pulumi:"op"`
}

func (GetQuerySpecificationCalculationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuerySpecificationCalculation)(nil)).Elem()
}

func (i GetQuerySpecificationCalculationArgs) ToGetQuerySpecificationCalculationOutput() GetQuerySpecificationCalculationOutput {
	return i.ToGetQuerySpecificationCalculationOutputWithContext(context.Background())
}

func (i GetQuerySpecificationCalculationArgs) ToGetQuerySpecificationCalculationOutputWithContext(ctx context.Context) GetQuerySpecificationCalculationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuerySpecificationCalculationOutput)
}

// GetQuerySpecificationCalculationArrayInput is an input type that accepts GetQuerySpecificationCalculationArray and GetQuerySpecificationCalculationArrayOutput values.
// You can construct a concrete instance of `GetQuerySpecificationCalculationArrayInput` via:
//
//          GetQuerySpecificationCalculationArray{ GetQuerySpecificationCalculationArgs{...} }
type GetQuerySpecificationCalculationArrayInput interface {
	pulumi.Input

	ToGetQuerySpecificationCalculationArrayOutput() GetQuerySpecificationCalculationArrayOutput
	ToGetQuerySpecificationCalculationArrayOutputWithContext(context.Context) GetQuerySpecificationCalculationArrayOutput
}

type GetQuerySpecificationCalculationArray []GetQuerySpecificationCalculationInput

func (GetQuerySpecificationCalculationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQuerySpecificationCalculation)(nil)).Elem()
}

func (i GetQuerySpecificationCalculationArray) ToGetQuerySpecificationCalculationArrayOutput() GetQuerySpecificationCalculationArrayOutput {
	return i.ToGetQuerySpecificationCalculationArrayOutputWithContext(context.Background())
}

func (i GetQuerySpecificationCalculationArray) ToGetQuerySpecificationCalculationArrayOutputWithContext(ctx context.Context) GetQuerySpecificationCalculationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuerySpecificationCalculationArrayOutput)
}

type GetQuerySpecificationCalculationOutput struct{ *pulumi.OutputState }

func (GetQuerySpecificationCalculationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuerySpecificationCalculation)(nil)).Elem()
}

func (o GetQuerySpecificationCalculationOutput) ToGetQuerySpecificationCalculationOutput() GetQuerySpecificationCalculationOutput {
	return o
}

func (o GetQuerySpecificationCalculationOutput) ToGetQuerySpecificationCalculationOutputWithContext(ctx context.Context) GetQuerySpecificationCalculationOutput {
	return o
}

// The column to apply the operator to, not needed with `COUNT` or `CONCURRENCY`.
func (o GetQuerySpecificationCalculationOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetQuerySpecificationCalculation) *string { return v.Column }).(pulumi.StringPtrOutput)
}

// The operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).
func (o GetQuerySpecificationCalculationOutput) Op() pulumi.StringOutput {
	return o.ApplyT(func(v GetQuerySpecificationCalculation) string { return v.Op }).(pulumi.StringOutput)
}

type GetQuerySpecificationCalculationArrayOutput struct{ *pulumi.OutputState }

func (GetQuerySpecificationCalculationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQuerySpecificationCalculation)(nil)).Elem()
}

func (o GetQuerySpecificationCalculationArrayOutput) ToGetQuerySpecificationCalculationArrayOutput() GetQuerySpecificationCalculationArrayOutput {
	return o
}

func (o GetQuerySpecificationCalculationArrayOutput) ToGetQuerySpecificationCalculationArrayOutputWithContext(ctx context.Context) GetQuerySpecificationCalculationArrayOutput {
	return o
}

func (o GetQuerySpecificationCalculationArrayOutput) Index(i pulumi.IntInput) GetQuerySpecificationCalculationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetQuerySpecificationCalculation {
		return vs[0].([]GetQuerySpecificationCalculation)[vs[1].(int)]
	}).(GetQuerySpecificationCalculationOutput)
}

type GetQuerySpecificationFilter struct {
	// The column to apply the filter to.
	Column string `pulumi:"column"`
	// The operator to apply, see the supported list of filter operators at [Filter Operators](https://docs.honeycomb.io/api/query-specification/#filter-operators). Not all operators require a value.
	Op string `pulumi:"op"`
	// The value used for the filter. Not needed if op is `exists`, `not-exists`, `in` or `not-in`. Mutually exclusive with the other `value_*` options.
	Value *string `pulumi:"value"`
	// Deprecated: use 'value' instead. The value used for the filter when the column is a boolean. Mutually exclusive with `value` and the other `value_*` options.
	//
	// Deprecated: Use of attribute `value_boolean` is discouraged and will fail to plan if using 'false'. Use of `value` is encouraged.
	ValueBoolean *bool `pulumi:"valueBoolean"`
	// Deprecated: use 'value' instead. The value used for the filter when the column is a float. Mutually exclusive with `value` and the other `value_*` options.
	//
	// Deprecated: Use of attribute `value_float` is discouraged and will fail to plan if using '0'. Use of `value` is encouraged.
	ValueFloat *float64 `pulumi:"valueFloat"`
	// Deprecated: use 'value' instead. The value used for the filter when the column is an integer. Mutually exclusive with `value` and the other `value_*` options.
	//
	// Deprecated: Use of attribute `value_integer` is discouraged and will fail to plan if using '0'. Use of `value` is encouraged.
	ValueInteger *int `pulumi:"valueInteger"`
	// Deprecated: use 'value' instead. The value used for the filter when the column is a string. Mutually exclusive with `value` and the other `value_*` options.
	//
	// Deprecated: Use of attribute `value_string` is discouraged and will fail to plan if using the empty string. Use of `value` is encouraged.
	ValueString *string `pulumi:"valueString"`
}

// GetQuerySpecificationFilterInput is an input type that accepts GetQuerySpecificationFilterArgs and GetQuerySpecificationFilterOutput values.
// You can construct a concrete instance of `GetQuerySpecificationFilterInput` via:
//
//          GetQuerySpecificationFilterArgs{...}
type GetQuerySpecificationFilterInput interface {
	pulumi.Input

	ToGetQuerySpecificationFilterOutput() GetQuerySpecificationFilterOutput
	ToGetQuerySpecificationFilterOutputWithContext(context.Context) GetQuerySpecificationFilterOutput
}

type GetQuerySpecificationFilterArgs struct {
	// The column to apply the filter to.
	Column pulumi.StringInput `pulumi:"column"`
	// The operator to apply, see the supported list of filter operators at [Filter Operators](https://docs.honeycomb.io/api/query-specification/#filter-operators). Not all operators require a value.
	Op pulumi.StringInput `pulumi:"op"`
	// The value used for the filter. Not needed if op is `exists`, `not-exists`, `in` or `not-in`. Mutually exclusive with the other `value_*` options.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Deprecated: use 'value' instead. The value used for the filter when the column is a boolean. Mutually exclusive with `value` and the other `value_*` options.
	//
	// Deprecated: Use of attribute `value_boolean` is discouraged and will fail to plan if using 'false'. Use of `value` is encouraged.
	ValueBoolean pulumi.BoolPtrInput `pulumi:"valueBoolean"`
	// Deprecated: use 'value' instead. The value used for the filter when the column is a float. Mutually exclusive with `value` and the other `value_*` options.
	//
	// Deprecated: Use of attribute `value_float` is discouraged and will fail to plan if using '0'. Use of `value` is encouraged.
	ValueFloat pulumi.Float64PtrInput `pulumi:"valueFloat"`
	// Deprecated: use 'value' instead. The value used for the filter when the column is an integer. Mutually exclusive with `value` and the other `value_*` options.
	//
	// Deprecated: Use of attribute `value_integer` is discouraged and will fail to plan if using '0'. Use of `value` is encouraged.
	ValueInteger pulumi.IntPtrInput `pulumi:"valueInteger"`
	// Deprecated: use 'value' instead. The value used for the filter when the column is a string. Mutually exclusive with `value` and the other `value_*` options.
	//
	// Deprecated: Use of attribute `value_string` is discouraged and will fail to plan if using the empty string. Use of `value` is encouraged.
	ValueString pulumi.StringPtrInput `pulumi:"valueString"`
}

func (GetQuerySpecificationFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuerySpecificationFilter)(nil)).Elem()
}

func (i GetQuerySpecificationFilterArgs) ToGetQuerySpecificationFilterOutput() GetQuerySpecificationFilterOutput {
	return i.ToGetQuerySpecificationFilterOutputWithContext(context.Background())
}

func (i GetQuerySpecificationFilterArgs) ToGetQuerySpecificationFilterOutputWithContext(ctx context.Context) GetQuerySpecificationFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuerySpecificationFilterOutput)
}

// GetQuerySpecificationFilterArrayInput is an input type that accepts GetQuerySpecificationFilterArray and GetQuerySpecificationFilterArrayOutput values.
// You can construct a concrete instance of `GetQuerySpecificationFilterArrayInput` via:
//
//          GetQuerySpecificationFilterArray{ GetQuerySpecificationFilterArgs{...} }
type GetQuerySpecificationFilterArrayInput interface {
	pulumi.Input

	ToGetQuerySpecificationFilterArrayOutput() GetQuerySpecificationFilterArrayOutput
	ToGetQuerySpecificationFilterArrayOutputWithContext(context.Context) GetQuerySpecificationFilterArrayOutput
}

type GetQuerySpecificationFilterArray []GetQuerySpecificationFilterInput

func (GetQuerySpecificationFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQuerySpecificationFilter)(nil)).Elem()
}

func (i GetQuerySpecificationFilterArray) ToGetQuerySpecificationFilterArrayOutput() GetQuerySpecificationFilterArrayOutput {
	return i.ToGetQuerySpecificationFilterArrayOutputWithContext(context.Background())
}

func (i GetQuerySpecificationFilterArray) ToGetQuerySpecificationFilterArrayOutputWithContext(ctx context.Context) GetQuerySpecificationFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuerySpecificationFilterArrayOutput)
}

type GetQuerySpecificationFilterOutput struct{ *pulumi.OutputState }

func (GetQuerySpecificationFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuerySpecificationFilter)(nil)).Elem()
}

func (o GetQuerySpecificationFilterOutput) ToGetQuerySpecificationFilterOutput() GetQuerySpecificationFilterOutput {
	return o
}

func (o GetQuerySpecificationFilterOutput) ToGetQuerySpecificationFilterOutputWithContext(ctx context.Context) GetQuerySpecificationFilterOutput {
	return o
}

// The column to apply the filter to.
func (o GetQuerySpecificationFilterOutput) Column() pulumi.StringOutput {
	return o.ApplyT(func(v GetQuerySpecificationFilter) string { return v.Column }).(pulumi.StringOutput)
}

// The operator to apply, see the supported list of filter operators at [Filter Operators](https://docs.honeycomb.io/api/query-specification/#filter-operators). Not all operators require a value.
func (o GetQuerySpecificationFilterOutput) Op() pulumi.StringOutput {
	return o.ApplyT(func(v GetQuerySpecificationFilter) string { return v.Op }).(pulumi.StringOutput)
}

// The value used for the filter. Not needed if op is `exists`, `not-exists`, `in` or `not-in`. Mutually exclusive with the other `value_*` options.
func (o GetQuerySpecificationFilterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetQuerySpecificationFilter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Deprecated: use 'value' instead. The value used for the filter when the column is a boolean. Mutually exclusive with `value` and the other `value_*` options.
//
// Deprecated: Use of attribute `value_boolean` is discouraged and will fail to plan if using 'false'. Use of `value` is encouraged.
func (o GetQuerySpecificationFilterOutput) ValueBoolean() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetQuerySpecificationFilter) *bool { return v.ValueBoolean }).(pulumi.BoolPtrOutput)
}

// Deprecated: use 'value' instead. The value used for the filter when the column is a float. Mutually exclusive with `value` and the other `value_*` options.
//
// Deprecated: Use of attribute `value_float` is discouraged and will fail to plan if using '0'. Use of `value` is encouraged.
func (o GetQuerySpecificationFilterOutput) ValueFloat() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v GetQuerySpecificationFilter) *float64 { return v.ValueFloat }).(pulumi.Float64PtrOutput)
}

// Deprecated: use 'value' instead. The value used for the filter when the column is an integer. Mutually exclusive with `value` and the other `value_*` options.
//
// Deprecated: Use of attribute `value_integer` is discouraged and will fail to plan if using '0'. Use of `value` is encouraged.
func (o GetQuerySpecificationFilterOutput) ValueInteger() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetQuerySpecificationFilter) *int { return v.ValueInteger }).(pulumi.IntPtrOutput)
}

// Deprecated: use 'value' instead. The value used for the filter when the column is a string. Mutually exclusive with `value` and the other `value_*` options.
//
// Deprecated: Use of attribute `value_string` is discouraged and will fail to plan if using the empty string. Use of `value` is encouraged.
func (o GetQuerySpecificationFilterOutput) ValueString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetQuerySpecificationFilter) *string { return v.ValueString }).(pulumi.StringPtrOutput)
}

type GetQuerySpecificationFilterArrayOutput struct{ *pulumi.OutputState }

func (GetQuerySpecificationFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQuerySpecificationFilter)(nil)).Elem()
}

func (o GetQuerySpecificationFilterArrayOutput) ToGetQuerySpecificationFilterArrayOutput() GetQuerySpecificationFilterArrayOutput {
	return o
}

func (o GetQuerySpecificationFilterArrayOutput) ToGetQuerySpecificationFilterArrayOutputWithContext(ctx context.Context) GetQuerySpecificationFilterArrayOutput {
	return o
}

func (o GetQuerySpecificationFilterArrayOutput) Index(i pulumi.IntInput) GetQuerySpecificationFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetQuerySpecificationFilter {
		return vs[0].([]GetQuerySpecificationFilter)[vs[1].(int)]
	}).(GetQuerySpecificationFilterOutput)
}

type GetQuerySpecificationHaving struct {
	// The calculation operator to apply, supports all of the [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators) with the exception of `HEATMAP`.
	CalculateOp string `pulumi:"calculateOp"`
	// The column to apply the `calculateOp` to, not needed with `COUNT` or `CONCURRENCY`.
	Column *string `pulumi:"column"`
	// The operator to apply to filter the query results. One of `=`, `!=`, `>`, `>=`, `<`, or `<=`.
	Op string `pulumi:"op"`
	// The value used with `op`. Currently assumed to be a number.
	Value float64 `pulumi:"value"`
}

// GetQuerySpecificationHavingInput is an input type that accepts GetQuerySpecificationHavingArgs and GetQuerySpecificationHavingOutput values.
// You can construct a concrete instance of `GetQuerySpecificationHavingInput` via:
//
//          GetQuerySpecificationHavingArgs{...}
type GetQuerySpecificationHavingInput interface {
	pulumi.Input

	ToGetQuerySpecificationHavingOutput() GetQuerySpecificationHavingOutput
	ToGetQuerySpecificationHavingOutputWithContext(context.Context) GetQuerySpecificationHavingOutput
}

type GetQuerySpecificationHavingArgs struct {
	// The calculation operator to apply, supports all of the [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators) with the exception of `HEATMAP`.
	CalculateOp pulumi.StringInput `pulumi:"calculateOp"`
	// The column to apply the `calculateOp` to, not needed with `COUNT` or `CONCURRENCY`.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// The operator to apply to filter the query results. One of `=`, `!=`, `>`, `>=`, `<`, or `<=`.
	Op pulumi.StringInput `pulumi:"op"`
	// The value used with `op`. Currently assumed to be a number.
	Value pulumi.Float64Input `pulumi:"value"`
}

func (GetQuerySpecificationHavingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuerySpecificationHaving)(nil)).Elem()
}

func (i GetQuerySpecificationHavingArgs) ToGetQuerySpecificationHavingOutput() GetQuerySpecificationHavingOutput {
	return i.ToGetQuerySpecificationHavingOutputWithContext(context.Background())
}

func (i GetQuerySpecificationHavingArgs) ToGetQuerySpecificationHavingOutputWithContext(ctx context.Context) GetQuerySpecificationHavingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuerySpecificationHavingOutput)
}

// GetQuerySpecificationHavingArrayInput is an input type that accepts GetQuerySpecificationHavingArray and GetQuerySpecificationHavingArrayOutput values.
// You can construct a concrete instance of `GetQuerySpecificationHavingArrayInput` via:
//
//          GetQuerySpecificationHavingArray{ GetQuerySpecificationHavingArgs{...} }
type GetQuerySpecificationHavingArrayInput interface {
	pulumi.Input

	ToGetQuerySpecificationHavingArrayOutput() GetQuerySpecificationHavingArrayOutput
	ToGetQuerySpecificationHavingArrayOutputWithContext(context.Context) GetQuerySpecificationHavingArrayOutput
}

type GetQuerySpecificationHavingArray []GetQuerySpecificationHavingInput

func (GetQuerySpecificationHavingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQuerySpecificationHaving)(nil)).Elem()
}

func (i GetQuerySpecificationHavingArray) ToGetQuerySpecificationHavingArrayOutput() GetQuerySpecificationHavingArrayOutput {
	return i.ToGetQuerySpecificationHavingArrayOutputWithContext(context.Background())
}

func (i GetQuerySpecificationHavingArray) ToGetQuerySpecificationHavingArrayOutputWithContext(ctx context.Context) GetQuerySpecificationHavingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuerySpecificationHavingArrayOutput)
}

type GetQuerySpecificationHavingOutput struct{ *pulumi.OutputState }

func (GetQuerySpecificationHavingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuerySpecificationHaving)(nil)).Elem()
}

func (o GetQuerySpecificationHavingOutput) ToGetQuerySpecificationHavingOutput() GetQuerySpecificationHavingOutput {
	return o
}

func (o GetQuerySpecificationHavingOutput) ToGetQuerySpecificationHavingOutputWithContext(ctx context.Context) GetQuerySpecificationHavingOutput {
	return o
}

// The calculation operator to apply, supports all of the [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators) with the exception of `HEATMAP`.
func (o GetQuerySpecificationHavingOutput) CalculateOp() pulumi.StringOutput {
	return o.ApplyT(func(v GetQuerySpecificationHaving) string { return v.CalculateOp }).(pulumi.StringOutput)
}

// The column to apply the `calculateOp` to, not needed with `COUNT` or `CONCURRENCY`.
func (o GetQuerySpecificationHavingOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetQuerySpecificationHaving) *string { return v.Column }).(pulumi.StringPtrOutput)
}

// The operator to apply to filter the query results. One of `=`, `!=`, `>`, `>=`, `<`, or `<=`.
func (o GetQuerySpecificationHavingOutput) Op() pulumi.StringOutput {
	return o.ApplyT(func(v GetQuerySpecificationHaving) string { return v.Op }).(pulumi.StringOutput)
}

// The value used with `op`. Currently assumed to be a number.
func (o GetQuerySpecificationHavingOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v GetQuerySpecificationHaving) float64 { return v.Value }).(pulumi.Float64Output)
}

type GetQuerySpecificationHavingArrayOutput struct{ *pulumi.OutputState }

func (GetQuerySpecificationHavingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQuerySpecificationHaving)(nil)).Elem()
}

func (o GetQuerySpecificationHavingArrayOutput) ToGetQuerySpecificationHavingArrayOutput() GetQuerySpecificationHavingArrayOutput {
	return o
}

func (o GetQuerySpecificationHavingArrayOutput) ToGetQuerySpecificationHavingArrayOutputWithContext(ctx context.Context) GetQuerySpecificationHavingArrayOutput {
	return o
}

func (o GetQuerySpecificationHavingArrayOutput) Index(i pulumi.IntInput) GetQuerySpecificationHavingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetQuerySpecificationHaving {
		return vs[0].([]GetQuerySpecificationHaving)[vs[1].(int)]
	}).(GetQuerySpecificationHavingOutput)
}

type GetQuerySpecificationOrder struct {
	// Either a column present in `breakdown` or a column to `op` applies to.
	Column *string `pulumi:"column"`
	// The calculation operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).
	Op *string `pulumi:"op"`
	// The sort direction, if set must be `ascending` or `descending`.
	Order *string `pulumi:"order"`
}

// GetQuerySpecificationOrderInput is an input type that accepts GetQuerySpecificationOrderArgs and GetQuerySpecificationOrderOutput values.
// You can construct a concrete instance of `GetQuerySpecificationOrderInput` via:
//
//          GetQuerySpecificationOrderArgs{...}
type GetQuerySpecificationOrderInput interface {
	pulumi.Input

	ToGetQuerySpecificationOrderOutput() GetQuerySpecificationOrderOutput
	ToGetQuerySpecificationOrderOutputWithContext(context.Context) GetQuerySpecificationOrderOutput
}

type GetQuerySpecificationOrderArgs struct {
	// Either a column present in `breakdown` or a column to `op` applies to.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// The calculation operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).
	Op pulumi.StringPtrInput `pulumi:"op"`
	// The sort direction, if set must be `ascending` or `descending`.
	Order pulumi.StringPtrInput `pulumi:"order"`
}

func (GetQuerySpecificationOrderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuerySpecificationOrder)(nil)).Elem()
}

func (i GetQuerySpecificationOrderArgs) ToGetQuerySpecificationOrderOutput() GetQuerySpecificationOrderOutput {
	return i.ToGetQuerySpecificationOrderOutputWithContext(context.Background())
}

func (i GetQuerySpecificationOrderArgs) ToGetQuerySpecificationOrderOutputWithContext(ctx context.Context) GetQuerySpecificationOrderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuerySpecificationOrderOutput)
}

// GetQuerySpecificationOrderArrayInput is an input type that accepts GetQuerySpecificationOrderArray and GetQuerySpecificationOrderArrayOutput values.
// You can construct a concrete instance of `GetQuerySpecificationOrderArrayInput` via:
//
//          GetQuerySpecificationOrderArray{ GetQuerySpecificationOrderArgs{...} }
type GetQuerySpecificationOrderArrayInput interface {
	pulumi.Input

	ToGetQuerySpecificationOrderArrayOutput() GetQuerySpecificationOrderArrayOutput
	ToGetQuerySpecificationOrderArrayOutputWithContext(context.Context) GetQuerySpecificationOrderArrayOutput
}

type GetQuerySpecificationOrderArray []GetQuerySpecificationOrderInput

func (GetQuerySpecificationOrderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQuerySpecificationOrder)(nil)).Elem()
}

func (i GetQuerySpecificationOrderArray) ToGetQuerySpecificationOrderArrayOutput() GetQuerySpecificationOrderArrayOutput {
	return i.ToGetQuerySpecificationOrderArrayOutputWithContext(context.Background())
}

func (i GetQuerySpecificationOrderArray) ToGetQuerySpecificationOrderArrayOutputWithContext(ctx context.Context) GetQuerySpecificationOrderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuerySpecificationOrderArrayOutput)
}

type GetQuerySpecificationOrderOutput struct{ *pulumi.OutputState }

func (GetQuerySpecificationOrderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuerySpecificationOrder)(nil)).Elem()
}

func (o GetQuerySpecificationOrderOutput) ToGetQuerySpecificationOrderOutput() GetQuerySpecificationOrderOutput {
	return o
}

func (o GetQuerySpecificationOrderOutput) ToGetQuerySpecificationOrderOutputWithContext(ctx context.Context) GetQuerySpecificationOrderOutput {
	return o
}

// Either a column present in `breakdown` or a column to `op` applies to.
func (o GetQuerySpecificationOrderOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetQuerySpecificationOrder) *string { return v.Column }).(pulumi.StringPtrOutput)
}

// The calculation operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).
func (o GetQuerySpecificationOrderOutput) Op() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetQuerySpecificationOrder) *string { return v.Op }).(pulumi.StringPtrOutput)
}

// The sort direction, if set must be `ascending` or `descending`.
func (o GetQuerySpecificationOrderOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetQuerySpecificationOrder) *string { return v.Order }).(pulumi.StringPtrOutput)
}

type GetQuerySpecificationOrderArrayOutput struct{ *pulumi.OutputState }

func (GetQuerySpecificationOrderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQuerySpecificationOrder)(nil)).Elem()
}

func (o GetQuerySpecificationOrderArrayOutput) ToGetQuerySpecificationOrderArrayOutput() GetQuerySpecificationOrderArrayOutput {
	return o
}

func (o GetQuerySpecificationOrderArrayOutput) ToGetQuerySpecificationOrderArrayOutputWithContext(ctx context.Context) GetQuerySpecificationOrderArrayOutput {
	return o
}

func (o GetQuerySpecificationOrderArrayOutput) Index(i pulumi.IntInput) GetQuerySpecificationOrderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetQuerySpecificationOrder {
		return vs[0].([]GetQuerySpecificationOrder)[vs[1].(int)]
	}).(GetQuerySpecificationOrderOutput)
}

type GetRecipientDetailFilter struct {
	// The name of the detail field to filter by. Allowed values are `address`, `channel`, `name`, `integrationName`, and `url`.
	Name string `pulumi:"name"`
	// The value of the detail field to match on.
	Value *string `pulumi:"value"`
	// A regular expression string to apply to the value of the detail field to match on.
	ValueRegex *string `pulumi:"valueRegex"`
}

// GetRecipientDetailFilterInput is an input type that accepts GetRecipientDetailFilterArgs and GetRecipientDetailFilterOutput values.
// You can construct a concrete instance of `GetRecipientDetailFilterInput` via:
//
//          GetRecipientDetailFilterArgs{...}
type GetRecipientDetailFilterInput interface {
	pulumi.Input

	ToGetRecipientDetailFilterOutput() GetRecipientDetailFilterOutput
	ToGetRecipientDetailFilterOutputWithContext(context.Context) GetRecipientDetailFilterOutput
}

type GetRecipientDetailFilterArgs struct {
	// The name of the detail field to filter by. Allowed values are `address`, `channel`, `name`, `integrationName`, and `url`.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the detail field to match on.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// A regular expression string to apply to the value of the detail field to match on.
	ValueRegex pulumi.StringPtrInput `pulumi:"valueRegex"`
}

func (GetRecipientDetailFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecipientDetailFilter)(nil)).Elem()
}

func (i GetRecipientDetailFilterArgs) ToGetRecipientDetailFilterOutput() GetRecipientDetailFilterOutput {
	return i.ToGetRecipientDetailFilterOutputWithContext(context.Background())
}

func (i GetRecipientDetailFilterArgs) ToGetRecipientDetailFilterOutputWithContext(ctx context.Context) GetRecipientDetailFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecipientDetailFilterOutput)
}

func (i GetRecipientDetailFilterArgs) ToGetRecipientDetailFilterPtrOutput() GetRecipientDetailFilterPtrOutput {
	return i.ToGetRecipientDetailFilterPtrOutputWithContext(context.Background())
}

func (i GetRecipientDetailFilterArgs) ToGetRecipientDetailFilterPtrOutputWithContext(ctx context.Context) GetRecipientDetailFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecipientDetailFilterOutput).ToGetRecipientDetailFilterPtrOutputWithContext(ctx)
}

// GetRecipientDetailFilterPtrInput is an input type that accepts GetRecipientDetailFilterArgs, GetRecipientDetailFilterPtr and GetRecipientDetailFilterPtrOutput values.
// You can construct a concrete instance of `GetRecipientDetailFilterPtrInput` via:
//
//          GetRecipientDetailFilterArgs{...}
//
//  or:
//
//          nil
type GetRecipientDetailFilterPtrInput interface {
	pulumi.Input

	ToGetRecipientDetailFilterPtrOutput() GetRecipientDetailFilterPtrOutput
	ToGetRecipientDetailFilterPtrOutputWithContext(context.Context) GetRecipientDetailFilterPtrOutput
}

type getRecipientDetailFilterPtrType GetRecipientDetailFilterArgs

func GetRecipientDetailFilterPtr(v *GetRecipientDetailFilterArgs) GetRecipientDetailFilterPtrInput {
	return (*getRecipientDetailFilterPtrType)(v)
}

func (*getRecipientDetailFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetRecipientDetailFilter)(nil)).Elem()
}

func (i *getRecipientDetailFilterPtrType) ToGetRecipientDetailFilterPtrOutput() GetRecipientDetailFilterPtrOutput {
	return i.ToGetRecipientDetailFilterPtrOutputWithContext(context.Background())
}

func (i *getRecipientDetailFilterPtrType) ToGetRecipientDetailFilterPtrOutputWithContext(ctx context.Context) GetRecipientDetailFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecipientDetailFilterPtrOutput)
}

type GetRecipientDetailFilterOutput struct{ *pulumi.OutputState }

func (GetRecipientDetailFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecipientDetailFilter)(nil)).Elem()
}

func (o GetRecipientDetailFilterOutput) ToGetRecipientDetailFilterOutput() GetRecipientDetailFilterOutput {
	return o
}

func (o GetRecipientDetailFilterOutput) ToGetRecipientDetailFilterOutputWithContext(ctx context.Context) GetRecipientDetailFilterOutput {
	return o
}

func (o GetRecipientDetailFilterOutput) ToGetRecipientDetailFilterPtrOutput() GetRecipientDetailFilterPtrOutput {
	return o.ToGetRecipientDetailFilterPtrOutputWithContext(context.Background())
}

func (o GetRecipientDetailFilterOutput) ToGetRecipientDetailFilterPtrOutputWithContext(ctx context.Context) GetRecipientDetailFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetRecipientDetailFilter) *GetRecipientDetailFilter {
		return &v
	}).(GetRecipientDetailFilterPtrOutput)
}

// The name of the detail field to filter by. Allowed values are `address`, `channel`, `name`, `integrationName`, and `url`.
func (o GetRecipientDetailFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecipientDetailFilter) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the detail field to match on.
func (o GetRecipientDetailFilterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRecipientDetailFilter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// A regular expression string to apply to the value of the detail field to match on.
func (o GetRecipientDetailFilterOutput) ValueRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRecipientDetailFilter) *string { return v.ValueRegex }).(pulumi.StringPtrOutput)
}

type GetRecipientDetailFilterPtrOutput struct{ *pulumi.OutputState }

func (GetRecipientDetailFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetRecipientDetailFilter)(nil)).Elem()
}

func (o GetRecipientDetailFilterPtrOutput) ToGetRecipientDetailFilterPtrOutput() GetRecipientDetailFilterPtrOutput {
	return o
}

func (o GetRecipientDetailFilterPtrOutput) ToGetRecipientDetailFilterPtrOutputWithContext(ctx context.Context) GetRecipientDetailFilterPtrOutput {
	return o
}

func (o GetRecipientDetailFilterPtrOutput) Elem() GetRecipientDetailFilterOutput {
	return o.ApplyT(func(v *GetRecipientDetailFilter) GetRecipientDetailFilter {
		if v != nil {
			return *v
		}
		var ret GetRecipientDetailFilter
		return ret
	}).(GetRecipientDetailFilterOutput)
}

// The name of the detail field to filter by. Allowed values are `address`, `channel`, `name`, `integrationName`, and `url`.
func (o GetRecipientDetailFilterPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRecipientDetailFilter) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The value of the detail field to match on.
func (o GetRecipientDetailFilterPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRecipientDetailFilter) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// A regular expression string to apply to the value of the detail field to match on.
func (o GetRecipientDetailFilterPtrOutput) ValueRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRecipientDetailFilter) *string {
		if v == nil {
			return nil
		}
		return v.ValueRegex
	}).(pulumi.StringPtrOutput)
}

type GetRecipientsDetailFilter struct {
	// The name of the detail field to filter by. Allowed values are `address`, `channel`, `name`, `integrationName`, and `url`.
	Name string `pulumi:"name"`
	// The value of the detail field to match on.
	Value *string `pulumi:"value"`
	// A regular expression string to apply to the value of the detail field to match on.
	ValueRegex *string `pulumi:"valueRegex"`
}

// GetRecipientsDetailFilterInput is an input type that accepts GetRecipientsDetailFilterArgs and GetRecipientsDetailFilterOutput values.
// You can construct a concrete instance of `GetRecipientsDetailFilterInput` via:
//
//          GetRecipientsDetailFilterArgs{...}
type GetRecipientsDetailFilterInput interface {
	pulumi.Input

	ToGetRecipientsDetailFilterOutput() GetRecipientsDetailFilterOutput
	ToGetRecipientsDetailFilterOutputWithContext(context.Context) GetRecipientsDetailFilterOutput
}

type GetRecipientsDetailFilterArgs struct {
	// The name of the detail field to filter by. Allowed values are `address`, `channel`, `name`, `integrationName`, and `url`.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the detail field to match on.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// A regular expression string to apply to the value of the detail field to match on.
	ValueRegex pulumi.StringPtrInput `pulumi:"valueRegex"`
}

func (GetRecipientsDetailFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecipientsDetailFilter)(nil)).Elem()
}

func (i GetRecipientsDetailFilterArgs) ToGetRecipientsDetailFilterOutput() GetRecipientsDetailFilterOutput {
	return i.ToGetRecipientsDetailFilterOutputWithContext(context.Background())
}

func (i GetRecipientsDetailFilterArgs) ToGetRecipientsDetailFilterOutputWithContext(ctx context.Context) GetRecipientsDetailFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecipientsDetailFilterOutput)
}

func (i GetRecipientsDetailFilterArgs) ToGetRecipientsDetailFilterPtrOutput() GetRecipientsDetailFilterPtrOutput {
	return i.ToGetRecipientsDetailFilterPtrOutputWithContext(context.Background())
}

func (i GetRecipientsDetailFilterArgs) ToGetRecipientsDetailFilterPtrOutputWithContext(ctx context.Context) GetRecipientsDetailFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecipientsDetailFilterOutput).ToGetRecipientsDetailFilterPtrOutputWithContext(ctx)
}

// GetRecipientsDetailFilterPtrInput is an input type that accepts GetRecipientsDetailFilterArgs, GetRecipientsDetailFilterPtr and GetRecipientsDetailFilterPtrOutput values.
// You can construct a concrete instance of `GetRecipientsDetailFilterPtrInput` via:
//
//          GetRecipientsDetailFilterArgs{...}
//
//  or:
//
//          nil
type GetRecipientsDetailFilterPtrInput interface {
	pulumi.Input

	ToGetRecipientsDetailFilterPtrOutput() GetRecipientsDetailFilterPtrOutput
	ToGetRecipientsDetailFilterPtrOutputWithContext(context.Context) GetRecipientsDetailFilterPtrOutput
}

type getRecipientsDetailFilterPtrType GetRecipientsDetailFilterArgs

func GetRecipientsDetailFilterPtr(v *GetRecipientsDetailFilterArgs) GetRecipientsDetailFilterPtrInput {
	return (*getRecipientsDetailFilterPtrType)(v)
}

func (*getRecipientsDetailFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetRecipientsDetailFilter)(nil)).Elem()
}

func (i *getRecipientsDetailFilterPtrType) ToGetRecipientsDetailFilterPtrOutput() GetRecipientsDetailFilterPtrOutput {
	return i.ToGetRecipientsDetailFilterPtrOutputWithContext(context.Background())
}

func (i *getRecipientsDetailFilterPtrType) ToGetRecipientsDetailFilterPtrOutputWithContext(ctx context.Context) GetRecipientsDetailFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecipientsDetailFilterPtrOutput)
}

type GetRecipientsDetailFilterOutput struct{ *pulumi.OutputState }

func (GetRecipientsDetailFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecipientsDetailFilter)(nil)).Elem()
}

func (o GetRecipientsDetailFilterOutput) ToGetRecipientsDetailFilterOutput() GetRecipientsDetailFilterOutput {
	return o
}

func (o GetRecipientsDetailFilterOutput) ToGetRecipientsDetailFilterOutputWithContext(ctx context.Context) GetRecipientsDetailFilterOutput {
	return o
}

func (o GetRecipientsDetailFilterOutput) ToGetRecipientsDetailFilterPtrOutput() GetRecipientsDetailFilterPtrOutput {
	return o.ToGetRecipientsDetailFilterPtrOutputWithContext(context.Background())
}

func (o GetRecipientsDetailFilterOutput) ToGetRecipientsDetailFilterPtrOutputWithContext(ctx context.Context) GetRecipientsDetailFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetRecipientsDetailFilter) *GetRecipientsDetailFilter {
		return &v
	}).(GetRecipientsDetailFilterPtrOutput)
}

// The name of the detail field to filter by. Allowed values are `address`, `channel`, `name`, `integrationName`, and `url`.
func (o GetRecipientsDetailFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecipientsDetailFilter) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the detail field to match on.
func (o GetRecipientsDetailFilterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRecipientsDetailFilter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// A regular expression string to apply to the value of the detail field to match on.
func (o GetRecipientsDetailFilterOutput) ValueRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRecipientsDetailFilter) *string { return v.ValueRegex }).(pulumi.StringPtrOutput)
}

type GetRecipientsDetailFilterPtrOutput struct{ *pulumi.OutputState }

func (GetRecipientsDetailFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetRecipientsDetailFilter)(nil)).Elem()
}

func (o GetRecipientsDetailFilterPtrOutput) ToGetRecipientsDetailFilterPtrOutput() GetRecipientsDetailFilterPtrOutput {
	return o
}

func (o GetRecipientsDetailFilterPtrOutput) ToGetRecipientsDetailFilterPtrOutputWithContext(ctx context.Context) GetRecipientsDetailFilterPtrOutput {
	return o
}

func (o GetRecipientsDetailFilterPtrOutput) Elem() GetRecipientsDetailFilterOutput {
	return o.ApplyT(func(v *GetRecipientsDetailFilter) GetRecipientsDetailFilter {
		if v != nil {
			return *v
		}
		var ret GetRecipientsDetailFilter
		return ret
	}).(GetRecipientsDetailFilterOutput)
}

// The name of the detail field to filter by. Allowed values are `address`, `channel`, `name`, `integrationName`, and `url`.
func (o GetRecipientsDetailFilterPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRecipientsDetailFilter) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The value of the detail field to match on.
func (o GetRecipientsDetailFilterPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRecipientsDetailFilter) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// A regular expression string to apply to the value of the detail field to match on.
func (o GetRecipientsDetailFilterPtrOutput) ValueRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRecipientsDetailFilter) *string {
		if v == nil {
			return nil
		}
		return v.ValueRegex
	}).(pulumi.StringPtrOutput)
}

type TriggerRecipient struct {
	// The ID of an already existing recipient. Should not be used in combination with `type` and `target`.
	Id *string `pulumi:"id"`
	// a block of additional details to send along with the notification. The only supported option currently is `pagerdutySeverity` which can be set to one of `info`, `warning`, `error`, or `critical` and must be used in combination with a PagerDuty recipient.
	NotificationDetails *TriggerRecipientNotificationDetails `pulumi:"notificationDetails"`
	// Target of the trigger recipient, this has another meaning depending on the type of recipient (see the table below). Should not be used in combination with `id`.
	Target *string `pulumi:"target"`
	// The type of the trigger recipient, allowed types are `email`, `marker`, `pagerduty`, `slack` and `webhook`. Should not be used in combination with `id`.
	Type *string `pulumi:"type"`
}

// TriggerRecipientInput is an input type that accepts TriggerRecipientArgs and TriggerRecipientOutput values.
// You can construct a concrete instance of `TriggerRecipientInput` via:
//
//          TriggerRecipientArgs{...}
type TriggerRecipientInput interface {
	pulumi.Input

	ToTriggerRecipientOutput() TriggerRecipientOutput
	ToTriggerRecipientOutputWithContext(context.Context) TriggerRecipientOutput
}

type TriggerRecipientArgs struct {
	// The ID of an already existing recipient. Should not be used in combination with `type` and `target`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// a block of additional details to send along with the notification. The only supported option currently is `pagerdutySeverity` which can be set to one of `info`, `warning`, `error`, or `critical` and must be used in combination with a PagerDuty recipient.
	NotificationDetails TriggerRecipientNotificationDetailsPtrInput `pulumi:"notificationDetails"`
	// Target of the trigger recipient, this has another meaning depending on the type of recipient (see the table below). Should not be used in combination with `id`.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// The type of the trigger recipient, allowed types are `email`, `marker`, `pagerduty`, `slack` and `webhook`. Should not be used in combination with `id`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (TriggerRecipientArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerRecipient)(nil)).Elem()
}

func (i TriggerRecipientArgs) ToTriggerRecipientOutput() TriggerRecipientOutput {
	return i.ToTriggerRecipientOutputWithContext(context.Background())
}

func (i TriggerRecipientArgs) ToTriggerRecipientOutputWithContext(ctx context.Context) TriggerRecipientOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerRecipientOutput)
}

// TriggerRecipientArrayInput is an input type that accepts TriggerRecipientArray and TriggerRecipientArrayOutput values.
// You can construct a concrete instance of `TriggerRecipientArrayInput` via:
//
//          TriggerRecipientArray{ TriggerRecipientArgs{...} }
type TriggerRecipientArrayInput interface {
	pulumi.Input

	ToTriggerRecipientArrayOutput() TriggerRecipientArrayOutput
	ToTriggerRecipientArrayOutputWithContext(context.Context) TriggerRecipientArrayOutput
}

type TriggerRecipientArray []TriggerRecipientInput

func (TriggerRecipientArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerRecipient)(nil)).Elem()
}

func (i TriggerRecipientArray) ToTriggerRecipientArrayOutput() TriggerRecipientArrayOutput {
	return i.ToTriggerRecipientArrayOutputWithContext(context.Background())
}

func (i TriggerRecipientArray) ToTriggerRecipientArrayOutputWithContext(ctx context.Context) TriggerRecipientArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerRecipientArrayOutput)
}

type TriggerRecipientOutput struct{ *pulumi.OutputState }

func (TriggerRecipientOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerRecipient)(nil)).Elem()
}

func (o TriggerRecipientOutput) ToTriggerRecipientOutput() TriggerRecipientOutput {
	return o
}

func (o TriggerRecipientOutput) ToTriggerRecipientOutputWithContext(ctx context.Context) TriggerRecipientOutput {
	return o
}

// The ID of an already existing recipient. Should not be used in combination with `type` and `target`.
func (o TriggerRecipientOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerRecipient) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// a block of additional details to send along with the notification. The only supported option currently is `pagerdutySeverity` which can be set to one of `info`, `warning`, `error`, or `critical` and must be used in combination with a PagerDuty recipient.
func (o TriggerRecipientOutput) NotificationDetails() TriggerRecipientNotificationDetailsPtrOutput {
	return o.ApplyT(func(v TriggerRecipient) *TriggerRecipientNotificationDetails { return v.NotificationDetails }).(TriggerRecipientNotificationDetailsPtrOutput)
}

// Target of the trigger recipient, this has another meaning depending on the type of recipient (see the table below). Should not be used in combination with `id`.
func (o TriggerRecipientOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerRecipient) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// The type of the trigger recipient, allowed types are `email`, `marker`, `pagerduty`, `slack` and `webhook`. Should not be used in combination with `id`.
func (o TriggerRecipientOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerRecipient) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type TriggerRecipientArrayOutput struct{ *pulumi.OutputState }

func (TriggerRecipientArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerRecipient)(nil)).Elem()
}

func (o TriggerRecipientArrayOutput) ToTriggerRecipientArrayOutput() TriggerRecipientArrayOutput {
	return o
}

func (o TriggerRecipientArrayOutput) ToTriggerRecipientArrayOutputWithContext(ctx context.Context) TriggerRecipientArrayOutput {
	return o
}

func (o TriggerRecipientArrayOutput) Index(i pulumi.IntInput) TriggerRecipientOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TriggerRecipient {
		return vs[0].([]TriggerRecipient)[vs[1].(int)]
	}).(TriggerRecipientOutput)
}

type TriggerRecipientNotificationDetails struct {
	PagerdutySeverity string `pulumi:"pagerdutySeverity"`
}

// TriggerRecipientNotificationDetailsInput is an input type that accepts TriggerRecipientNotificationDetailsArgs and TriggerRecipientNotificationDetailsOutput values.
// You can construct a concrete instance of `TriggerRecipientNotificationDetailsInput` via:
//
//          TriggerRecipientNotificationDetailsArgs{...}
type TriggerRecipientNotificationDetailsInput interface {
	pulumi.Input

	ToTriggerRecipientNotificationDetailsOutput() TriggerRecipientNotificationDetailsOutput
	ToTriggerRecipientNotificationDetailsOutputWithContext(context.Context) TriggerRecipientNotificationDetailsOutput
}

type TriggerRecipientNotificationDetailsArgs struct {
	PagerdutySeverity pulumi.StringInput `pulumi:"pagerdutySeverity"`
}

func (TriggerRecipientNotificationDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerRecipientNotificationDetails)(nil)).Elem()
}

func (i TriggerRecipientNotificationDetailsArgs) ToTriggerRecipientNotificationDetailsOutput() TriggerRecipientNotificationDetailsOutput {
	return i.ToTriggerRecipientNotificationDetailsOutputWithContext(context.Background())
}

func (i TriggerRecipientNotificationDetailsArgs) ToTriggerRecipientNotificationDetailsOutputWithContext(ctx context.Context) TriggerRecipientNotificationDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerRecipientNotificationDetailsOutput)
}

func (i TriggerRecipientNotificationDetailsArgs) ToTriggerRecipientNotificationDetailsPtrOutput() TriggerRecipientNotificationDetailsPtrOutput {
	return i.ToTriggerRecipientNotificationDetailsPtrOutputWithContext(context.Background())
}

func (i TriggerRecipientNotificationDetailsArgs) ToTriggerRecipientNotificationDetailsPtrOutputWithContext(ctx context.Context) TriggerRecipientNotificationDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerRecipientNotificationDetailsOutput).ToTriggerRecipientNotificationDetailsPtrOutputWithContext(ctx)
}

// TriggerRecipientNotificationDetailsPtrInput is an input type that accepts TriggerRecipientNotificationDetailsArgs, TriggerRecipientNotificationDetailsPtr and TriggerRecipientNotificationDetailsPtrOutput values.
// You can construct a concrete instance of `TriggerRecipientNotificationDetailsPtrInput` via:
//
//          TriggerRecipientNotificationDetailsArgs{...}
//
//  or:
//
//          nil
type TriggerRecipientNotificationDetailsPtrInput interface {
	pulumi.Input

	ToTriggerRecipientNotificationDetailsPtrOutput() TriggerRecipientNotificationDetailsPtrOutput
	ToTriggerRecipientNotificationDetailsPtrOutputWithContext(context.Context) TriggerRecipientNotificationDetailsPtrOutput
}

type triggerRecipientNotificationDetailsPtrType TriggerRecipientNotificationDetailsArgs

func TriggerRecipientNotificationDetailsPtr(v *TriggerRecipientNotificationDetailsArgs) TriggerRecipientNotificationDetailsPtrInput {
	return (*triggerRecipientNotificationDetailsPtrType)(v)
}

func (*triggerRecipientNotificationDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerRecipientNotificationDetails)(nil)).Elem()
}

func (i *triggerRecipientNotificationDetailsPtrType) ToTriggerRecipientNotificationDetailsPtrOutput() TriggerRecipientNotificationDetailsPtrOutput {
	return i.ToTriggerRecipientNotificationDetailsPtrOutputWithContext(context.Background())
}

func (i *triggerRecipientNotificationDetailsPtrType) ToTriggerRecipientNotificationDetailsPtrOutputWithContext(ctx context.Context) TriggerRecipientNotificationDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerRecipientNotificationDetailsPtrOutput)
}

type TriggerRecipientNotificationDetailsOutput struct{ *pulumi.OutputState }

func (TriggerRecipientNotificationDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerRecipientNotificationDetails)(nil)).Elem()
}

func (o TriggerRecipientNotificationDetailsOutput) ToTriggerRecipientNotificationDetailsOutput() TriggerRecipientNotificationDetailsOutput {
	return o
}

func (o TriggerRecipientNotificationDetailsOutput) ToTriggerRecipientNotificationDetailsOutputWithContext(ctx context.Context) TriggerRecipientNotificationDetailsOutput {
	return o
}

func (o TriggerRecipientNotificationDetailsOutput) ToTriggerRecipientNotificationDetailsPtrOutput() TriggerRecipientNotificationDetailsPtrOutput {
	return o.ToTriggerRecipientNotificationDetailsPtrOutputWithContext(context.Background())
}

func (o TriggerRecipientNotificationDetailsOutput) ToTriggerRecipientNotificationDetailsPtrOutputWithContext(ctx context.Context) TriggerRecipientNotificationDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TriggerRecipientNotificationDetails) *TriggerRecipientNotificationDetails {
		return &v
	}).(TriggerRecipientNotificationDetailsPtrOutput)
}

func (o TriggerRecipientNotificationDetailsOutput) PagerdutySeverity() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerRecipientNotificationDetails) string { return v.PagerdutySeverity }).(pulumi.StringOutput)
}

type TriggerRecipientNotificationDetailsPtrOutput struct{ *pulumi.OutputState }

func (TriggerRecipientNotificationDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerRecipientNotificationDetails)(nil)).Elem()
}

func (o TriggerRecipientNotificationDetailsPtrOutput) ToTriggerRecipientNotificationDetailsPtrOutput() TriggerRecipientNotificationDetailsPtrOutput {
	return o
}

func (o TriggerRecipientNotificationDetailsPtrOutput) ToTriggerRecipientNotificationDetailsPtrOutputWithContext(ctx context.Context) TriggerRecipientNotificationDetailsPtrOutput {
	return o
}

func (o TriggerRecipientNotificationDetailsPtrOutput) Elem() TriggerRecipientNotificationDetailsOutput {
	return o.ApplyT(func(v *TriggerRecipientNotificationDetails) TriggerRecipientNotificationDetails {
		if v != nil {
			return *v
		}
		var ret TriggerRecipientNotificationDetails
		return ret
	}).(TriggerRecipientNotificationDetailsOutput)
}

func (o TriggerRecipientNotificationDetailsPtrOutput) PagerdutySeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerRecipientNotificationDetails) *string {
		if v == nil {
			return nil
		}
		return &v.PagerdutySeverity
	}).(pulumi.StringPtrOutput)
}

type TriggerThreshold struct {
	// The operator to apply, allowed threshold operators are `>`, `>=`, `<`, and `<=`.
	Op string `pulumi:"op"`
	// The value to be used with the operator.
	Value float64 `pulumi:"value"`
}

// TriggerThresholdInput is an input type that accepts TriggerThresholdArgs and TriggerThresholdOutput values.
// You can construct a concrete instance of `TriggerThresholdInput` via:
//
//          TriggerThresholdArgs{...}
type TriggerThresholdInput interface {
	pulumi.Input

	ToTriggerThresholdOutput() TriggerThresholdOutput
	ToTriggerThresholdOutputWithContext(context.Context) TriggerThresholdOutput
}

type TriggerThresholdArgs struct {
	// The operator to apply, allowed threshold operators are `>`, `>=`, `<`, and `<=`.
	Op pulumi.StringInput `pulumi:"op"`
	// The value to be used with the operator.
	Value pulumi.Float64Input `pulumi:"value"`
}

func (TriggerThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerThreshold)(nil)).Elem()
}

func (i TriggerThresholdArgs) ToTriggerThresholdOutput() TriggerThresholdOutput {
	return i.ToTriggerThresholdOutputWithContext(context.Background())
}

func (i TriggerThresholdArgs) ToTriggerThresholdOutputWithContext(ctx context.Context) TriggerThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerThresholdOutput)
}

func (i TriggerThresholdArgs) ToTriggerThresholdPtrOutput() TriggerThresholdPtrOutput {
	return i.ToTriggerThresholdPtrOutputWithContext(context.Background())
}

func (i TriggerThresholdArgs) ToTriggerThresholdPtrOutputWithContext(ctx context.Context) TriggerThresholdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerThresholdOutput).ToTriggerThresholdPtrOutputWithContext(ctx)
}

// TriggerThresholdPtrInput is an input type that accepts TriggerThresholdArgs, TriggerThresholdPtr and TriggerThresholdPtrOutput values.
// You can construct a concrete instance of `TriggerThresholdPtrInput` via:
//
//          TriggerThresholdArgs{...}
//
//  or:
//
//          nil
type TriggerThresholdPtrInput interface {
	pulumi.Input

	ToTriggerThresholdPtrOutput() TriggerThresholdPtrOutput
	ToTriggerThresholdPtrOutputWithContext(context.Context) TriggerThresholdPtrOutput
}

type triggerThresholdPtrType TriggerThresholdArgs

func TriggerThresholdPtr(v *TriggerThresholdArgs) TriggerThresholdPtrInput {
	return (*triggerThresholdPtrType)(v)
}

func (*triggerThresholdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerThreshold)(nil)).Elem()
}

func (i *triggerThresholdPtrType) ToTriggerThresholdPtrOutput() TriggerThresholdPtrOutput {
	return i.ToTriggerThresholdPtrOutputWithContext(context.Background())
}

func (i *triggerThresholdPtrType) ToTriggerThresholdPtrOutputWithContext(ctx context.Context) TriggerThresholdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerThresholdPtrOutput)
}

type TriggerThresholdOutput struct{ *pulumi.OutputState }

func (TriggerThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerThreshold)(nil)).Elem()
}

func (o TriggerThresholdOutput) ToTriggerThresholdOutput() TriggerThresholdOutput {
	return o
}

func (o TriggerThresholdOutput) ToTriggerThresholdOutputWithContext(ctx context.Context) TriggerThresholdOutput {
	return o
}

func (o TriggerThresholdOutput) ToTriggerThresholdPtrOutput() TriggerThresholdPtrOutput {
	return o.ToTriggerThresholdPtrOutputWithContext(context.Background())
}

func (o TriggerThresholdOutput) ToTriggerThresholdPtrOutputWithContext(ctx context.Context) TriggerThresholdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TriggerThreshold) *TriggerThreshold {
		return &v
	}).(TriggerThresholdPtrOutput)
}

// The operator to apply, allowed threshold operators are `>`, `>=`, `<`, and `<=`.
func (o TriggerThresholdOutput) Op() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerThreshold) string { return v.Op }).(pulumi.StringOutput)
}

// The value to be used with the operator.
func (o TriggerThresholdOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v TriggerThreshold) float64 { return v.Value }).(pulumi.Float64Output)
}

type TriggerThresholdPtrOutput struct{ *pulumi.OutputState }

func (TriggerThresholdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerThreshold)(nil)).Elem()
}

func (o TriggerThresholdPtrOutput) ToTriggerThresholdPtrOutput() TriggerThresholdPtrOutput {
	return o
}

func (o TriggerThresholdPtrOutput) ToTriggerThresholdPtrOutputWithContext(ctx context.Context) TriggerThresholdPtrOutput {
	return o
}

func (o TriggerThresholdPtrOutput) Elem() TriggerThresholdOutput {
	return o.ApplyT(func(v *TriggerThreshold) TriggerThreshold {
		if v != nil {
			return *v
		}
		var ret TriggerThreshold
		return ret
	}).(TriggerThresholdOutput)
}

// The operator to apply, allowed threshold operators are `>`, `>=`, `<`, and `<=`.
func (o TriggerThresholdPtrOutput) Op() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerThreshold) *string {
		if v == nil {
			return nil
		}
		return &v.Op
	}).(pulumi.StringPtrOutput)
}

// The value to be used with the operator.
func (o TriggerThresholdPtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TriggerThreshold) *float64 {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.Float64PtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BoardQueryInput)(nil)).Elem(), BoardQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BoardQueryArrayInput)(nil)).Elem(), BoardQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BurnAlertRecipientInput)(nil)).Elem(), BurnAlertRecipientArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BurnAlertRecipientArrayInput)(nil)).Elem(), BurnAlertRecipientArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BurnAlertRecipientNotificationDetailsInput)(nil)).Elem(), BurnAlertRecipientNotificationDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BurnAlertRecipientNotificationDetailsPtrInput)(nil)).Elem(), BurnAlertRecipientNotificationDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQuerySpecificationCalculationInput)(nil)).Elem(), GetQuerySpecificationCalculationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQuerySpecificationCalculationArrayInput)(nil)).Elem(), GetQuerySpecificationCalculationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQuerySpecificationFilterInput)(nil)).Elem(), GetQuerySpecificationFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQuerySpecificationFilterArrayInput)(nil)).Elem(), GetQuerySpecificationFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQuerySpecificationHavingInput)(nil)).Elem(), GetQuerySpecificationHavingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQuerySpecificationHavingArrayInput)(nil)).Elem(), GetQuerySpecificationHavingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQuerySpecificationOrderInput)(nil)).Elem(), GetQuerySpecificationOrderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQuerySpecificationOrderArrayInput)(nil)).Elem(), GetQuerySpecificationOrderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecipientDetailFilterInput)(nil)).Elem(), GetRecipientDetailFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecipientDetailFilterPtrInput)(nil)).Elem(), GetRecipientDetailFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecipientsDetailFilterInput)(nil)).Elem(), GetRecipientsDetailFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecipientsDetailFilterPtrInput)(nil)).Elem(), GetRecipientsDetailFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerRecipientInput)(nil)).Elem(), TriggerRecipientArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerRecipientArrayInput)(nil)).Elem(), TriggerRecipientArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerRecipientNotificationDetailsInput)(nil)).Elem(), TriggerRecipientNotificationDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerRecipientNotificationDetailsPtrInput)(nil)).Elem(), TriggerRecipientNotificationDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerThresholdInput)(nil)).Elem(), TriggerThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerThresholdPtrInput)(nil)).Elem(), TriggerThresholdArgs{})
	pulumi.RegisterOutputType(BoardQueryOutput{})
	pulumi.RegisterOutputType(BoardQueryArrayOutput{})
	pulumi.RegisterOutputType(BurnAlertRecipientOutput{})
	pulumi.RegisterOutputType(BurnAlertRecipientArrayOutput{})
	pulumi.RegisterOutputType(BurnAlertRecipientNotificationDetailsOutput{})
	pulumi.RegisterOutputType(BurnAlertRecipientNotificationDetailsPtrOutput{})
	pulumi.RegisterOutputType(GetQuerySpecificationCalculationOutput{})
	pulumi.RegisterOutputType(GetQuerySpecificationCalculationArrayOutput{})
	pulumi.RegisterOutputType(GetQuerySpecificationFilterOutput{})
	pulumi.RegisterOutputType(GetQuerySpecificationFilterArrayOutput{})
	pulumi.RegisterOutputType(GetQuerySpecificationHavingOutput{})
	pulumi.RegisterOutputType(GetQuerySpecificationHavingArrayOutput{})
	pulumi.RegisterOutputType(GetQuerySpecificationOrderOutput{})
	pulumi.RegisterOutputType(GetQuerySpecificationOrderArrayOutput{})
	pulumi.RegisterOutputType(GetRecipientDetailFilterOutput{})
	pulumi.RegisterOutputType(GetRecipientDetailFilterPtrOutput{})
	pulumi.RegisterOutputType(GetRecipientsDetailFilterOutput{})
	pulumi.RegisterOutputType(GetRecipientsDetailFilterPtrOutput{})
	pulumi.RegisterOutputType(TriggerRecipientOutput{})
	pulumi.RegisterOutputType(TriggerRecipientArrayOutput{})
	pulumi.RegisterOutputType(TriggerRecipientNotificationDetailsOutput{})
	pulumi.RegisterOutputType(TriggerRecipientNotificationDetailsPtrOutput{})
	pulumi.RegisterOutputType(TriggerThresholdOutput{})
	pulumi.RegisterOutputType(TriggerThresholdPtrOutput{})
}
