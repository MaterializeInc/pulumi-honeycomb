// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package honeycomb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Resource: MarkerSetting
//
// Creates a marker setting. For more information about marker settings, check out the [Marker Settings API](https://docs.honeycomb.io/api/marker-settings/).
type MarkerSetting struct {
	pulumi.CustomResourceState

	// The color set for the marker as a hex color code (e.g. `#DF4661`)
	Color pulumi.StringOutput `pulumi:"color"`
	// Timestamp when the marker setting was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The dataset this marker setting is placed on.
	Dataset pulumi.StringOutput `pulumi:"dataset"`
	// The type of the marker setting, Honeycomb.io can display markers in different colors depending on their type.
	Type pulumi.StringOutput `pulumi:"type"`
	// Timestamp when the marker setting was last modified.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewMarkerSetting registers a new resource with the given unique name, arguments, and options.
func NewMarkerSetting(ctx *pulumi.Context,
	name string, args *MarkerSettingArgs, opts ...pulumi.ResourceOption) (*MarkerSetting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Color == nil {
		return nil, errors.New("invalid value for required argument 'Color'")
	}
	if args.Dataset == nil {
		return nil, errors.New("invalid value for required argument 'Dataset'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource MarkerSetting
	err := ctx.RegisterResource("honeycomb:index/markerSetting:MarkerSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMarkerSetting gets an existing MarkerSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMarkerSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MarkerSettingState, opts ...pulumi.ResourceOption) (*MarkerSetting, error) {
	var resource MarkerSetting
	err := ctx.ReadResource("honeycomb:index/markerSetting:MarkerSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MarkerSetting resources.
type markerSettingState struct {
	// The color set for the marker as a hex color code (e.g. `#DF4661`)
	Color *string `pulumi:"color"`
	// Timestamp when the marker setting was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The dataset this marker setting is placed on.
	Dataset *string `pulumi:"dataset"`
	// The type of the marker setting, Honeycomb.io can display markers in different colors depending on their type.
	Type *string `pulumi:"type"`
	// Timestamp when the marker setting was last modified.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type MarkerSettingState struct {
	// The color set for the marker as a hex color code (e.g. `#DF4661`)
	Color pulumi.StringPtrInput
	// Timestamp when the marker setting was created.
	CreatedAt pulumi.StringPtrInput
	// The dataset this marker setting is placed on.
	Dataset pulumi.StringPtrInput
	// The type of the marker setting, Honeycomb.io can display markers in different colors depending on their type.
	Type pulumi.StringPtrInput
	// Timestamp when the marker setting was last modified.
	UpdatedAt pulumi.StringPtrInput
}

func (MarkerSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*markerSettingState)(nil)).Elem()
}

type markerSettingArgs struct {
	// The color set for the marker as a hex color code (e.g. `#DF4661`)
	Color string `pulumi:"color"`
	// The dataset this marker setting is placed on.
	Dataset string `pulumi:"dataset"`
	// The type of the marker setting, Honeycomb.io can display markers in different colors depending on their type.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a MarkerSetting resource.
type MarkerSettingArgs struct {
	// The color set for the marker as a hex color code (e.g. `#DF4661`)
	Color pulumi.StringInput
	// The dataset this marker setting is placed on.
	Dataset pulumi.StringInput
	// The type of the marker setting, Honeycomb.io can display markers in different colors depending on their type.
	Type pulumi.StringInput
}

func (MarkerSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*markerSettingArgs)(nil)).Elem()
}

type MarkerSettingInput interface {
	pulumi.Input

	ToMarkerSettingOutput() MarkerSettingOutput
	ToMarkerSettingOutputWithContext(ctx context.Context) MarkerSettingOutput
}

func (*MarkerSetting) ElementType() reflect.Type {
	return reflect.TypeOf((**MarkerSetting)(nil)).Elem()
}

func (i *MarkerSetting) ToMarkerSettingOutput() MarkerSettingOutput {
	return i.ToMarkerSettingOutputWithContext(context.Background())
}

func (i *MarkerSetting) ToMarkerSettingOutputWithContext(ctx context.Context) MarkerSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkerSettingOutput)
}

// MarkerSettingArrayInput is an input type that accepts MarkerSettingArray and MarkerSettingArrayOutput values.
// You can construct a concrete instance of `MarkerSettingArrayInput` via:
//
//          MarkerSettingArray{ MarkerSettingArgs{...} }
type MarkerSettingArrayInput interface {
	pulumi.Input

	ToMarkerSettingArrayOutput() MarkerSettingArrayOutput
	ToMarkerSettingArrayOutputWithContext(context.Context) MarkerSettingArrayOutput
}

type MarkerSettingArray []MarkerSettingInput

func (MarkerSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MarkerSetting)(nil)).Elem()
}

func (i MarkerSettingArray) ToMarkerSettingArrayOutput() MarkerSettingArrayOutput {
	return i.ToMarkerSettingArrayOutputWithContext(context.Background())
}

func (i MarkerSettingArray) ToMarkerSettingArrayOutputWithContext(ctx context.Context) MarkerSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkerSettingArrayOutput)
}

// MarkerSettingMapInput is an input type that accepts MarkerSettingMap and MarkerSettingMapOutput values.
// You can construct a concrete instance of `MarkerSettingMapInput` via:
//
//          MarkerSettingMap{ "key": MarkerSettingArgs{...} }
type MarkerSettingMapInput interface {
	pulumi.Input

	ToMarkerSettingMapOutput() MarkerSettingMapOutput
	ToMarkerSettingMapOutputWithContext(context.Context) MarkerSettingMapOutput
}

type MarkerSettingMap map[string]MarkerSettingInput

func (MarkerSettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MarkerSetting)(nil)).Elem()
}

func (i MarkerSettingMap) ToMarkerSettingMapOutput() MarkerSettingMapOutput {
	return i.ToMarkerSettingMapOutputWithContext(context.Background())
}

func (i MarkerSettingMap) ToMarkerSettingMapOutputWithContext(ctx context.Context) MarkerSettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkerSettingMapOutput)
}

type MarkerSettingOutput struct{ *pulumi.OutputState }

func (MarkerSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MarkerSetting)(nil)).Elem()
}

func (o MarkerSettingOutput) ToMarkerSettingOutput() MarkerSettingOutput {
	return o
}

func (o MarkerSettingOutput) ToMarkerSettingOutputWithContext(ctx context.Context) MarkerSettingOutput {
	return o
}

// The color set for the marker as a hex color code (e.g. `#DF4661`)
func (o MarkerSettingOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v *MarkerSetting) pulumi.StringOutput { return v.Color }).(pulumi.StringOutput)
}

// Timestamp when the marker setting was created.
func (o MarkerSettingOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *MarkerSetting) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The dataset this marker setting is placed on.
func (o MarkerSettingOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v *MarkerSetting) pulumi.StringOutput { return v.Dataset }).(pulumi.StringOutput)
}

// The type of the marker setting, Honeycomb.io can display markers in different colors depending on their type.
func (o MarkerSettingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *MarkerSetting) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Timestamp when the marker setting was last modified.
func (o MarkerSettingOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *MarkerSetting) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type MarkerSettingArrayOutput struct{ *pulumi.OutputState }

func (MarkerSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MarkerSetting)(nil)).Elem()
}

func (o MarkerSettingArrayOutput) ToMarkerSettingArrayOutput() MarkerSettingArrayOutput {
	return o
}

func (o MarkerSettingArrayOutput) ToMarkerSettingArrayOutputWithContext(ctx context.Context) MarkerSettingArrayOutput {
	return o
}

func (o MarkerSettingArrayOutput) Index(i pulumi.IntInput) MarkerSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MarkerSetting {
		return vs[0].([]*MarkerSetting)[vs[1].(int)]
	}).(MarkerSettingOutput)
}

type MarkerSettingMapOutput struct{ *pulumi.OutputState }

func (MarkerSettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MarkerSetting)(nil)).Elem()
}

func (o MarkerSettingMapOutput) ToMarkerSettingMapOutput() MarkerSettingMapOutput {
	return o
}

func (o MarkerSettingMapOutput) ToMarkerSettingMapOutputWithContext(ctx context.Context) MarkerSettingMapOutput {
	return o
}

func (o MarkerSettingMapOutput) MapIndex(k pulumi.StringInput) MarkerSettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MarkerSetting {
		return vs[0].(map[string]*MarkerSetting)[vs[1].(string)]
	}).(MarkerSettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MarkerSettingInput)(nil)).Elem(), &MarkerSetting{})
	pulumi.RegisterInputType(reflect.TypeOf((*MarkerSettingArrayInput)(nil)).Elem(), MarkerSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MarkerSettingMapInput)(nil)).Elem(), MarkerSettingMap{})
	pulumi.RegisterOutputType(MarkerSettingOutput{})
	pulumi.RegisterOutputType(MarkerSettingArrayOutput{})
	pulumi.RegisterOutputType(MarkerSettingMapOutput{})
}
