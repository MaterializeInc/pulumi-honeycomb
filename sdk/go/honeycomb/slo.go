// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package honeycomb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Resource: SLO
//
// Creates a service level objective (SLO). For more information about SLOs, check out [Set Service Level Objectives (SLOs)](https://docs.honeycomb.io/working-with-your-data/slos/).
//
// ## Import
//
// SLOs can be imported using a combination of the dataset name and their ID, e.g.
//
// ```sh
//  $ pulumi import honeycomb:index/sLO:SLO my_slo my-dataset/bj9BwOb1uKz
// ```
//
//  You can find the ID in the URL bar when visiting the SLO from the UI.
type SLO struct {
	pulumi.CustomResourceState

	// The dataset this SLO is created in. Must be the same dataset as the SLI.
	Dataset pulumi.StringOutput `pulumi:"dataset"`
	// A description of the SLO's intent and context.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the SLO.
	Name pulumi.StringOutput `pulumi:"name"`
	// The alias of the Derived Column that will be used as the SLI to indicate event success.
	// The derived column used as the SLI must be in the same dataset as the SLO. Additionally,
	// the column evaluation should consistently return nil, true, or false, as these are the only valid values for an SLI.
	Sli pulumi.StringOutput `pulumi:"sli"`
	// The percentage of qualified events that you expect to succeed during the `timePeriod`.
	TargetPercentage pulumi.Float64Output `pulumi:"targetPercentage"`
	// The time period, in days, over which your SLO will be evaluated.
	TimePeriod pulumi.IntOutput `pulumi:"timePeriod"`
}

// NewSLO registers a new resource with the given unique name, arguments, and options.
func NewSLO(ctx *pulumi.Context,
	name string, args *SLOArgs, opts ...pulumi.ResourceOption) (*SLO, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dataset == nil {
		return nil, errors.New("invalid value for required argument 'Dataset'")
	}
	if args.Sli == nil {
		return nil, errors.New("invalid value for required argument 'Sli'")
	}
	if args.TargetPercentage == nil {
		return nil, errors.New("invalid value for required argument 'TargetPercentage'")
	}
	if args.TimePeriod == nil {
		return nil, errors.New("invalid value for required argument 'TimePeriod'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SLO
	err := ctx.RegisterResource("honeycomb:index/sLO:SLO", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSLO gets an existing SLO resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSLO(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SLOState, opts ...pulumi.ResourceOption) (*SLO, error) {
	var resource SLO
	err := ctx.ReadResource("honeycomb:index/sLO:SLO", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SLO resources.
type sloState struct {
	// The dataset this SLO is created in. Must be the same dataset as the SLI.
	Dataset *string `pulumi:"dataset"`
	// A description of the SLO's intent and context.
	Description *string `pulumi:"description"`
	// The name of the SLO.
	Name *string `pulumi:"name"`
	// The alias of the Derived Column that will be used as the SLI to indicate event success.
	// The derived column used as the SLI must be in the same dataset as the SLO. Additionally,
	// the column evaluation should consistently return nil, true, or false, as these are the only valid values for an SLI.
	Sli *string `pulumi:"sli"`
	// The percentage of qualified events that you expect to succeed during the `timePeriod`.
	TargetPercentage *float64 `pulumi:"targetPercentage"`
	// The time period, in days, over which your SLO will be evaluated.
	TimePeriod *int `pulumi:"timePeriod"`
}

type SLOState struct {
	// The dataset this SLO is created in. Must be the same dataset as the SLI.
	Dataset pulumi.StringPtrInput
	// A description of the SLO's intent and context.
	Description pulumi.StringPtrInput
	// The name of the SLO.
	Name pulumi.StringPtrInput
	// The alias of the Derived Column that will be used as the SLI to indicate event success.
	// The derived column used as the SLI must be in the same dataset as the SLO. Additionally,
	// the column evaluation should consistently return nil, true, or false, as these are the only valid values for an SLI.
	Sli pulumi.StringPtrInput
	// The percentage of qualified events that you expect to succeed during the `timePeriod`.
	TargetPercentage pulumi.Float64PtrInput
	// The time period, in days, over which your SLO will be evaluated.
	TimePeriod pulumi.IntPtrInput
}

func (SLOState) ElementType() reflect.Type {
	return reflect.TypeOf((*sloState)(nil)).Elem()
}

type sloArgs struct {
	// The dataset this SLO is created in. Must be the same dataset as the SLI.
	Dataset string `pulumi:"dataset"`
	// A description of the SLO's intent and context.
	Description *string `pulumi:"description"`
	// The name of the SLO.
	Name *string `pulumi:"name"`
	// The alias of the Derived Column that will be used as the SLI to indicate event success.
	// The derived column used as the SLI must be in the same dataset as the SLO. Additionally,
	// the column evaluation should consistently return nil, true, or false, as these are the only valid values for an SLI.
	Sli string `pulumi:"sli"`
	// The percentage of qualified events that you expect to succeed during the `timePeriod`.
	TargetPercentage float64 `pulumi:"targetPercentage"`
	// The time period, in days, over which your SLO will be evaluated.
	TimePeriod int `pulumi:"timePeriod"`
}

// The set of arguments for constructing a SLO resource.
type SLOArgs struct {
	// The dataset this SLO is created in. Must be the same dataset as the SLI.
	Dataset pulumi.StringInput
	// A description of the SLO's intent and context.
	Description pulumi.StringPtrInput
	// The name of the SLO.
	Name pulumi.StringPtrInput
	// The alias of the Derived Column that will be used as the SLI to indicate event success.
	// The derived column used as the SLI must be in the same dataset as the SLO. Additionally,
	// the column evaluation should consistently return nil, true, or false, as these are the only valid values for an SLI.
	Sli pulumi.StringInput
	// The percentage of qualified events that you expect to succeed during the `timePeriod`.
	TargetPercentage pulumi.Float64Input
	// The time period, in days, over which your SLO will be evaluated.
	TimePeriod pulumi.IntInput
}

func (SLOArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sloArgs)(nil)).Elem()
}

type SLOInput interface {
	pulumi.Input

	ToSLOOutput() SLOOutput
	ToSLOOutputWithContext(ctx context.Context) SLOOutput
}

func (*SLO) ElementType() reflect.Type {
	return reflect.TypeOf((**SLO)(nil)).Elem()
}

func (i *SLO) ToSLOOutput() SLOOutput {
	return i.ToSLOOutputWithContext(context.Background())
}

func (i *SLO) ToSLOOutputWithContext(ctx context.Context) SLOOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOOutput)
}

// SLOArrayInput is an input type that accepts SLOArray and SLOArrayOutput values.
// You can construct a concrete instance of `SLOArrayInput` via:
//
//          SLOArray{ SLOArgs{...} }
type SLOArrayInput interface {
	pulumi.Input

	ToSLOArrayOutput() SLOArrayOutput
	ToSLOArrayOutputWithContext(context.Context) SLOArrayOutput
}

type SLOArray []SLOInput

func (SLOArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SLO)(nil)).Elem()
}

func (i SLOArray) ToSLOArrayOutput() SLOArrayOutput {
	return i.ToSLOArrayOutputWithContext(context.Background())
}

func (i SLOArray) ToSLOArrayOutputWithContext(ctx context.Context) SLOArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOArrayOutput)
}

// SLOMapInput is an input type that accepts SLOMap and SLOMapOutput values.
// You can construct a concrete instance of `SLOMapInput` via:
//
//          SLOMap{ "key": SLOArgs{...} }
type SLOMapInput interface {
	pulumi.Input

	ToSLOMapOutput() SLOMapOutput
	ToSLOMapOutputWithContext(context.Context) SLOMapOutput
}

type SLOMap map[string]SLOInput

func (SLOMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SLO)(nil)).Elem()
}

func (i SLOMap) ToSLOMapOutput() SLOMapOutput {
	return i.ToSLOMapOutputWithContext(context.Background())
}

func (i SLOMap) ToSLOMapOutputWithContext(ctx context.Context) SLOMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOMapOutput)
}

type SLOOutput struct{ *pulumi.OutputState }

func (SLOOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SLO)(nil)).Elem()
}

func (o SLOOutput) ToSLOOutput() SLOOutput {
	return o
}

func (o SLOOutput) ToSLOOutputWithContext(ctx context.Context) SLOOutput {
	return o
}

// The dataset this SLO is created in. Must be the same dataset as the SLI.
func (o SLOOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v *SLO) pulumi.StringOutput { return v.Dataset }).(pulumi.StringOutput)
}

// A description of the SLO's intent and context.
func (o SLOOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SLO) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the SLO.
func (o SLOOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SLO) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The alias of the Derived Column that will be used as the SLI to indicate event success.
// The derived column used as the SLI must be in the same dataset as the SLO. Additionally,
// the column evaluation should consistently return nil, true, or false, as these are the only valid values for an SLI.
func (o SLOOutput) Sli() pulumi.StringOutput {
	return o.ApplyT(func(v *SLO) pulumi.StringOutput { return v.Sli }).(pulumi.StringOutput)
}

// The percentage of qualified events that you expect to succeed during the `timePeriod`.
func (o SLOOutput) TargetPercentage() pulumi.Float64Output {
	return o.ApplyT(func(v *SLO) pulumi.Float64Output { return v.TargetPercentage }).(pulumi.Float64Output)
}

// The time period, in days, over which your SLO will be evaluated.
func (o SLOOutput) TimePeriod() pulumi.IntOutput {
	return o.ApplyT(func(v *SLO) pulumi.IntOutput { return v.TimePeriod }).(pulumi.IntOutput)
}

type SLOArrayOutput struct{ *pulumi.OutputState }

func (SLOArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SLO)(nil)).Elem()
}

func (o SLOArrayOutput) ToSLOArrayOutput() SLOArrayOutput {
	return o
}

func (o SLOArrayOutput) ToSLOArrayOutputWithContext(ctx context.Context) SLOArrayOutput {
	return o
}

func (o SLOArrayOutput) Index(i pulumi.IntInput) SLOOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SLO {
		return vs[0].([]*SLO)[vs[1].(int)]
	}).(SLOOutput)
}

type SLOMapOutput struct{ *pulumi.OutputState }

func (SLOMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SLO)(nil)).Elem()
}

func (o SLOMapOutput) ToSLOMapOutput() SLOMapOutput {
	return o
}

func (o SLOMapOutput) ToSLOMapOutputWithContext(ctx context.Context) SLOMapOutput {
	return o
}

func (o SLOMapOutput) MapIndex(k pulumi.StringInput) SLOOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SLO {
		return vs[0].(map[string]*SLO)[vs[1].(string)]
	}).(SLOOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SLOInput)(nil)).Elem(), &SLO{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOArrayInput)(nil)).Elem(), SLOArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOMapInput)(nil)).Elem(), SLOMap{})
	pulumi.RegisterOutputType(SLOOutput{})
	pulumi.RegisterOutputType(SLOArrayOutput{})
	pulumi.RegisterOutputType(SLOMapOutput{})
}
