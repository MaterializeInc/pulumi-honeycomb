// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package honeycomb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Resource: PagerdutyRecipient
//
// `PagerdutyRecipient` allows you to define and manage a PagerDuty recipient that can be used by Triggers or BurnAlerts notifications.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-honeycomb/sdk/go/honeycomb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := honeycomb.NewPagerdutyRecipient(ctx, "prod-oncall", &honeycomb.PagerdutyRecipientArgs{
//				IntegrationKey:  pulumi.String("cd6e8de3c857aefc950e0d5ebcb79ac2"),
//				IntegrationName: pulumi.String("Production on-call notifications"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// PagerDuty Recipients can be imported by their ID, e.g.
//
// ```sh
//
//	$ pulumi import honeycomb:index/pagerdutyRecipient:PagerdutyRecipient my_recipient nx2zsegA0dZ
//
// ```
type PagerdutyRecipient struct {
	pulumi.CustomResourceState

	// The key of the PagerDuty Integration to send the notification to.
	IntegrationKey pulumi.StringOutput `pulumi:"integrationKey"`
	// The name of the PagerDuty Integration to send the notification to.
	IntegrationName pulumi.StringOutput `pulumi:"integrationName"`
}

// NewPagerdutyRecipient registers a new resource with the given unique name, arguments, and options.
func NewPagerdutyRecipient(ctx *pulumi.Context,
	name string, args *PagerdutyRecipientArgs, opts ...pulumi.ResourceOption) (*PagerdutyRecipient, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IntegrationKey == nil {
		return nil, errors.New("invalid value for required argument 'IntegrationKey'")
	}
	if args.IntegrationName == nil {
		return nil, errors.New("invalid value for required argument 'IntegrationName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource PagerdutyRecipient
	err := ctx.RegisterResource("honeycomb:index/pagerdutyRecipient:PagerdutyRecipient", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPagerdutyRecipient gets an existing PagerdutyRecipient resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPagerdutyRecipient(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PagerdutyRecipientState, opts ...pulumi.ResourceOption) (*PagerdutyRecipient, error) {
	var resource PagerdutyRecipient
	err := ctx.ReadResource("honeycomb:index/pagerdutyRecipient:PagerdutyRecipient", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PagerdutyRecipient resources.
type pagerdutyRecipientState struct {
	// The key of the PagerDuty Integration to send the notification to.
	IntegrationKey *string `pulumi:"integrationKey"`
	// The name of the PagerDuty Integration to send the notification to.
	IntegrationName *string `pulumi:"integrationName"`
}

type PagerdutyRecipientState struct {
	// The key of the PagerDuty Integration to send the notification to.
	IntegrationKey pulumi.StringPtrInput
	// The name of the PagerDuty Integration to send the notification to.
	IntegrationName pulumi.StringPtrInput
}

func (PagerdutyRecipientState) ElementType() reflect.Type {
	return reflect.TypeOf((*pagerdutyRecipientState)(nil)).Elem()
}

type pagerdutyRecipientArgs struct {
	// The key of the PagerDuty Integration to send the notification to.
	IntegrationKey string `pulumi:"integrationKey"`
	// The name of the PagerDuty Integration to send the notification to.
	IntegrationName string `pulumi:"integrationName"`
}

// The set of arguments for constructing a PagerdutyRecipient resource.
type PagerdutyRecipientArgs struct {
	// The key of the PagerDuty Integration to send the notification to.
	IntegrationKey pulumi.StringInput
	// The name of the PagerDuty Integration to send the notification to.
	IntegrationName pulumi.StringInput
}

func (PagerdutyRecipientArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pagerdutyRecipientArgs)(nil)).Elem()
}

type PagerdutyRecipientInput interface {
	pulumi.Input

	ToPagerdutyRecipientOutput() PagerdutyRecipientOutput
	ToPagerdutyRecipientOutputWithContext(ctx context.Context) PagerdutyRecipientOutput
}

func (*PagerdutyRecipient) ElementType() reflect.Type {
	return reflect.TypeOf((**PagerdutyRecipient)(nil)).Elem()
}

func (i *PagerdutyRecipient) ToPagerdutyRecipientOutput() PagerdutyRecipientOutput {
	return i.ToPagerdutyRecipientOutputWithContext(context.Background())
}

func (i *PagerdutyRecipient) ToPagerdutyRecipientOutputWithContext(ctx context.Context) PagerdutyRecipientOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PagerdutyRecipientOutput)
}

// PagerdutyRecipientArrayInput is an input type that accepts PagerdutyRecipientArray and PagerdutyRecipientArrayOutput values.
// You can construct a concrete instance of `PagerdutyRecipientArrayInput` via:
//
//	PagerdutyRecipientArray{ PagerdutyRecipientArgs{...} }
type PagerdutyRecipientArrayInput interface {
	pulumi.Input

	ToPagerdutyRecipientArrayOutput() PagerdutyRecipientArrayOutput
	ToPagerdutyRecipientArrayOutputWithContext(context.Context) PagerdutyRecipientArrayOutput
}

type PagerdutyRecipientArray []PagerdutyRecipientInput

func (PagerdutyRecipientArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PagerdutyRecipient)(nil)).Elem()
}

func (i PagerdutyRecipientArray) ToPagerdutyRecipientArrayOutput() PagerdutyRecipientArrayOutput {
	return i.ToPagerdutyRecipientArrayOutputWithContext(context.Background())
}

func (i PagerdutyRecipientArray) ToPagerdutyRecipientArrayOutputWithContext(ctx context.Context) PagerdutyRecipientArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PagerdutyRecipientArrayOutput)
}

// PagerdutyRecipientMapInput is an input type that accepts PagerdutyRecipientMap and PagerdutyRecipientMapOutput values.
// You can construct a concrete instance of `PagerdutyRecipientMapInput` via:
//
//	PagerdutyRecipientMap{ "key": PagerdutyRecipientArgs{...} }
type PagerdutyRecipientMapInput interface {
	pulumi.Input

	ToPagerdutyRecipientMapOutput() PagerdutyRecipientMapOutput
	ToPagerdutyRecipientMapOutputWithContext(context.Context) PagerdutyRecipientMapOutput
}

type PagerdutyRecipientMap map[string]PagerdutyRecipientInput

func (PagerdutyRecipientMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PagerdutyRecipient)(nil)).Elem()
}

func (i PagerdutyRecipientMap) ToPagerdutyRecipientMapOutput() PagerdutyRecipientMapOutput {
	return i.ToPagerdutyRecipientMapOutputWithContext(context.Background())
}

func (i PagerdutyRecipientMap) ToPagerdutyRecipientMapOutputWithContext(ctx context.Context) PagerdutyRecipientMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PagerdutyRecipientMapOutput)
}

type PagerdutyRecipientOutput struct{ *pulumi.OutputState }

func (PagerdutyRecipientOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PagerdutyRecipient)(nil)).Elem()
}

func (o PagerdutyRecipientOutput) ToPagerdutyRecipientOutput() PagerdutyRecipientOutput {
	return o
}

func (o PagerdutyRecipientOutput) ToPagerdutyRecipientOutputWithContext(ctx context.Context) PagerdutyRecipientOutput {
	return o
}

// The key of the PagerDuty Integration to send the notification to.
func (o PagerdutyRecipientOutput) IntegrationKey() pulumi.StringOutput {
	return o.ApplyT(func(v *PagerdutyRecipient) pulumi.StringOutput { return v.IntegrationKey }).(pulumi.StringOutput)
}

// The name of the PagerDuty Integration to send the notification to.
func (o PagerdutyRecipientOutput) IntegrationName() pulumi.StringOutput {
	return o.ApplyT(func(v *PagerdutyRecipient) pulumi.StringOutput { return v.IntegrationName }).(pulumi.StringOutput)
}

type PagerdutyRecipientArrayOutput struct{ *pulumi.OutputState }

func (PagerdutyRecipientArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PagerdutyRecipient)(nil)).Elem()
}

func (o PagerdutyRecipientArrayOutput) ToPagerdutyRecipientArrayOutput() PagerdutyRecipientArrayOutput {
	return o
}

func (o PagerdutyRecipientArrayOutput) ToPagerdutyRecipientArrayOutputWithContext(ctx context.Context) PagerdutyRecipientArrayOutput {
	return o
}

func (o PagerdutyRecipientArrayOutput) Index(i pulumi.IntInput) PagerdutyRecipientOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PagerdutyRecipient {
		return vs[0].([]*PagerdutyRecipient)[vs[1].(int)]
	}).(PagerdutyRecipientOutput)
}

type PagerdutyRecipientMapOutput struct{ *pulumi.OutputState }

func (PagerdutyRecipientMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PagerdutyRecipient)(nil)).Elem()
}

func (o PagerdutyRecipientMapOutput) ToPagerdutyRecipientMapOutput() PagerdutyRecipientMapOutput {
	return o
}

func (o PagerdutyRecipientMapOutput) ToPagerdutyRecipientMapOutputWithContext(ctx context.Context) PagerdutyRecipientMapOutput {
	return o
}

func (o PagerdutyRecipientMapOutput) MapIndex(k pulumi.StringInput) PagerdutyRecipientOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PagerdutyRecipient {
		return vs[0].(map[string]*PagerdutyRecipient)[vs[1].(string)]
	}).(PagerdutyRecipientOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PagerdutyRecipientInput)(nil)).Elem(), &PagerdutyRecipient{})
	pulumi.RegisterInputType(reflect.TypeOf((*PagerdutyRecipientArrayInput)(nil)).Elem(), PagerdutyRecipientArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PagerdutyRecipientMapInput)(nil)).Elem(), PagerdutyRecipientMap{})
	pulumi.RegisterOutputType(PagerdutyRecipientOutput{})
	pulumi.RegisterOutputType(PagerdutyRecipientArrayOutput{})
	pulumi.RegisterOutputType(PagerdutyRecipientMapOutput{})
}
