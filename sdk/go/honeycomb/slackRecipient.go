// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package honeycomb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Resource: SlackRecipient
//
// `SlackRecipient` allows you to define and manage a Slack channel or user recipient that can be used by Triggers or BurnAlerts notifications.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-honeycomb/sdk/go/honeycomb"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := honeycomb.NewSlackRecipient(ctx, "alerts", &honeycomb.SlackRecipientArgs{
// 			Channel: pulumi.String("#alerts"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Slack Recipients can be imported by their ID, e.g.
//
// ```sh
//  $ pulumi import honeycomb:index/slackRecipient:SlackRecipient my_recipient nx2zsegA0dZ
// ```
type SlackRecipient struct {
	pulumi.CustomResourceState

	// The Slack channel or username to send the notification to. Must begin with `#` or `@`.
	Channel pulumi.StringOutput `pulumi:"channel"`
}

// NewSlackRecipient registers a new resource with the given unique name, arguments, and options.
func NewSlackRecipient(ctx *pulumi.Context,
	name string, args *SlackRecipientArgs, opts ...pulumi.ResourceOption) (*SlackRecipient, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Channel == nil {
		return nil, errors.New("invalid value for required argument 'Channel'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SlackRecipient
	err := ctx.RegisterResource("honeycomb:index/slackRecipient:SlackRecipient", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSlackRecipient gets an existing SlackRecipient resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSlackRecipient(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SlackRecipientState, opts ...pulumi.ResourceOption) (*SlackRecipient, error) {
	var resource SlackRecipient
	err := ctx.ReadResource("honeycomb:index/slackRecipient:SlackRecipient", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SlackRecipient resources.
type slackRecipientState struct {
	// The Slack channel or username to send the notification to. Must begin with `#` or `@`.
	Channel *string `pulumi:"channel"`
}

type SlackRecipientState struct {
	// The Slack channel or username to send the notification to. Must begin with `#` or `@`.
	Channel pulumi.StringPtrInput
}

func (SlackRecipientState) ElementType() reflect.Type {
	return reflect.TypeOf((*slackRecipientState)(nil)).Elem()
}

type slackRecipientArgs struct {
	// The Slack channel or username to send the notification to. Must begin with `#` or `@`.
	Channel string `pulumi:"channel"`
}

// The set of arguments for constructing a SlackRecipient resource.
type SlackRecipientArgs struct {
	// The Slack channel or username to send the notification to. Must begin with `#` or `@`.
	Channel pulumi.StringInput
}

func (SlackRecipientArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*slackRecipientArgs)(nil)).Elem()
}

type SlackRecipientInput interface {
	pulumi.Input

	ToSlackRecipientOutput() SlackRecipientOutput
	ToSlackRecipientOutputWithContext(ctx context.Context) SlackRecipientOutput
}

func (*SlackRecipient) ElementType() reflect.Type {
	return reflect.TypeOf((**SlackRecipient)(nil)).Elem()
}

func (i *SlackRecipient) ToSlackRecipientOutput() SlackRecipientOutput {
	return i.ToSlackRecipientOutputWithContext(context.Background())
}

func (i *SlackRecipient) ToSlackRecipientOutputWithContext(ctx context.Context) SlackRecipientOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackRecipientOutput)
}

// SlackRecipientArrayInput is an input type that accepts SlackRecipientArray and SlackRecipientArrayOutput values.
// You can construct a concrete instance of `SlackRecipientArrayInput` via:
//
//          SlackRecipientArray{ SlackRecipientArgs{...} }
type SlackRecipientArrayInput interface {
	pulumi.Input

	ToSlackRecipientArrayOutput() SlackRecipientArrayOutput
	ToSlackRecipientArrayOutputWithContext(context.Context) SlackRecipientArrayOutput
}

type SlackRecipientArray []SlackRecipientInput

func (SlackRecipientArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SlackRecipient)(nil)).Elem()
}

func (i SlackRecipientArray) ToSlackRecipientArrayOutput() SlackRecipientArrayOutput {
	return i.ToSlackRecipientArrayOutputWithContext(context.Background())
}

func (i SlackRecipientArray) ToSlackRecipientArrayOutputWithContext(ctx context.Context) SlackRecipientArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackRecipientArrayOutput)
}

// SlackRecipientMapInput is an input type that accepts SlackRecipientMap and SlackRecipientMapOutput values.
// You can construct a concrete instance of `SlackRecipientMapInput` via:
//
//          SlackRecipientMap{ "key": SlackRecipientArgs{...} }
type SlackRecipientMapInput interface {
	pulumi.Input

	ToSlackRecipientMapOutput() SlackRecipientMapOutput
	ToSlackRecipientMapOutputWithContext(context.Context) SlackRecipientMapOutput
}

type SlackRecipientMap map[string]SlackRecipientInput

func (SlackRecipientMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SlackRecipient)(nil)).Elem()
}

func (i SlackRecipientMap) ToSlackRecipientMapOutput() SlackRecipientMapOutput {
	return i.ToSlackRecipientMapOutputWithContext(context.Background())
}

func (i SlackRecipientMap) ToSlackRecipientMapOutputWithContext(ctx context.Context) SlackRecipientMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackRecipientMapOutput)
}

type SlackRecipientOutput struct{ *pulumi.OutputState }

func (SlackRecipientOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SlackRecipient)(nil)).Elem()
}

func (o SlackRecipientOutput) ToSlackRecipientOutput() SlackRecipientOutput {
	return o
}

func (o SlackRecipientOutput) ToSlackRecipientOutputWithContext(ctx context.Context) SlackRecipientOutput {
	return o
}

// The Slack channel or username to send the notification to. Must begin with `#` or `@`.
func (o SlackRecipientOutput) Channel() pulumi.StringOutput {
	return o.ApplyT(func(v *SlackRecipient) pulumi.StringOutput { return v.Channel }).(pulumi.StringOutput)
}

type SlackRecipientArrayOutput struct{ *pulumi.OutputState }

func (SlackRecipientArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SlackRecipient)(nil)).Elem()
}

func (o SlackRecipientArrayOutput) ToSlackRecipientArrayOutput() SlackRecipientArrayOutput {
	return o
}

func (o SlackRecipientArrayOutput) ToSlackRecipientArrayOutputWithContext(ctx context.Context) SlackRecipientArrayOutput {
	return o
}

func (o SlackRecipientArrayOutput) Index(i pulumi.IntInput) SlackRecipientOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SlackRecipient {
		return vs[0].([]*SlackRecipient)[vs[1].(int)]
	}).(SlackRecipientOutput)
}

type SlackRecipientMapOutput struct{ *pulumi.OutputState }

func (SlackRecipientMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SlackRecipient)(nil)).Elem()
}

func (o SlackRecipientMapOutput) ToSlackRecipientMapOutput() SlackRecipientMapOutput {
	return o
}

func (o SlackRecipientMapOutput) ToSlackRecipientMapOutputWithContext(ctx context.Context) SlackRecipientMapOutput {
	return o
}

func (o SlackRecipientMapOutput) MapIndex(k pulumi.StringInput) SlackRecipientOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SlackRecipient {
		return vs[0].(map[string]*SlackRecipient)[vs[1].(string)]
	}).(SlackRecipientOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SlackRecipientInput)(nil)).Elem(), &SlackRecipient{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlackRecipientArrayInput)(nil)).Elem(), SlackRecipientArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlackRecipientMapInput)(nil)).Elem(), SlackRecipientMap{})
	pulumi.RegisterOutputType(SlackRecipientOutput{})
	pulumi.RegisterOutputType(SlackRecipientArrayOutput{})
	pulumi.RegisterOutputType(SlackRecipientMapOutput{})
}
